{"ast":null,"code":"var _watch;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue } from '../../vue';\nimport { NAME_FORM_DATEPICKER } from '../../constants/components';\nimport { EVENT_NAME_CONTEXT, EVENT_NAME_HIDDEN, EVENT_NAME_SHOWN } from '../../constants/events';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_DATE_STRING, PROP_TYPE_STRING } from '../../constants/props';\nimport { SLOT_NAME_BUTTON_CONTENT } from '../../constants/slots';\nimport { createDate, constrainDate, formatYMD, parseYMD } from '../../utils/date';\nimport { attemptBlur, attemptFocus } from '../../utils/dom';\nimport { isUndefinedOrNull } from '../../utils/inspect';\nimport { makeModelMixin } from '../../utils/model';\nimport { omit, pick, sortKeys } from '../../utils/object';\nimport { makeProp, makePropsConfigurable, pluckProps } from '../../utils/props';\nimport { idMixin, props as idProps } from '../../mixins/id';\nimport { BIconCalendar, BIconCalendarFill } from '../../icons/icons';\nimport { BButton } from '../button/button';\nimport { BCalendar, props as BCalendarProps } from '../calendar/calendar';\nimport { BVFormBtnLabelControl, props as BVFormBtnLabelControlProps } from '../form-btn-label-control/bv-form-btn-label-control'; // --- Constants ---\n\nvar _makeModelMixin = makeModelMixin('value', {\n  type: PROP_TYPE_DATE_STRING\n}),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event; // --- Props ---\n\n\nvar calendarProps = omit(BCalendarProps, ['block', 'hidden', 'id', 'noKeyNav', 'roleDescription', 'value', 'width']);\nvar formBtnLabelControlProps = omit(BVFormBtnLabelControlProps, ['formattedValue', 'id', 'lang', 'rtl', 'value']);\nexport var props = makePropsConfigurable(sortKeys(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, idProps), modelProps), calendarProps), formBtnLabelControlProps), {}, {\n  // Width of the calendar dropdown\n  calendarWidth: makeProp(PROP_TYPE_STRING, '270px'),\n  closeButton: makeProp(PROP_TYPE_BOOLEAN, false),\n  closeButtonVariant: makeProp(PROP_TYPE_STRING, 'outline-secondary'),\n  // Dark mode\n  dark: makeProp(PROP_TYPE_BOOLEAN, false),\n  labelCloseButton: makeProp(PROP_TYPE_STRING, 'Close'),\n  labelResetButton: makeProp(PROP_TYPE_STRING, 'Reset'),\n  labelTodayButton: makeProp(PROP_TYPE_STRING, 'Select today'),\n  noCloseOnSelect: makeProp(PROP_TYPE_BOOLEAN, false),\n  resetButton: makeProp(PROP_TYPE_BOOLEAN, false),\n  resetButtonVariant: makeProp(PROP_TYPE_STRING, 'outline-danger'),\n  resetValue: makeProp(PROP_TYPE_DATE_STRING),\n  todayButton: makeProp(PROP_TYPE_BOOLEAN, false),\n  todayButtonVariant: makeProp(PROP_TYPE_STRING, 'outline-primary')\n})), NAME_FORM_DATEPICKER); // --- Main component ---\n// @vue/component\n\nexport var BFormDatepicker = /*#__PURE__*/Vue.extend({\n  name: NAME_FORM_DATEPICKER,\n  mixins: [idMixin, modelMixin],\n  props: props,\n  data: function data() {\n    return {\n      // We always use `YYYY-MM-DD` value internally\n      localYMD: formatYMD(this[MODEL_PROP_NAME]) || '',\n      // If the popup is open\n      isVisible: false,\n      // Context data from BCalendar\n      localLocale: null,\n      isRTL: false,\n      formattedValue: '',\n      activeYMD: ''\n    };\n  },\n  computed: {\n    calendarYM: function calendarYM() {\n      // Returns the calendar year/month\n      // Returns the `YYYY-MM` portion of the active calendar date\n      return this.activeYMD.slice(0, -3);\n    },\n    computedLang: function computedLang() {\n      return (this.localLocale || '').replace(/-u-.*$/i, '') || null;\n    },\n    computedResetValue: function computedResetValue() {\n      return formatYMD(constrainDate(this.resetValue)) || '';\n    }\n  },\n  watch: (_watch = {}, _defineProperty(_watch, MODEL_PROP_NAME, function (newValue) {\n    this.localYMD = formatYMD(newValue) || '';\n  }), _defineProperty(_watch, \"localYMD\", function localYMD(newValue) {\n    // We only update the v-model when the datepicker is open\n    if (this.isVisible) {\n      this.$emit(MODEL_EVENT_NAME, this.valueAsDate ? parseYMD(newValue) || null : newValue || '');\n    }\n  }), _defineProperty(_watch, \"calendarYM\", function calendarYM(newValue, oldValue) {\n    // Displayed calendar month has changed\n    // So possibly the calendar height has changed...\n    // We need to update popper computed position\n    if (newValue !== oldValue && oldValue) {\n      try {\n        this.$refs.control.updatePopper();\n      } catch (_unused) {}\n    }\n  }), _watch),\n  methods: {\n    // Public methods\n    focus: function focus() {\n      if (!this.disabled) {\n        attemptFocus(this.$refs.control);\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        attemptBlur(this.$refs.control);\n      }\n    },\n    // Private methods\n    setAndClose: function setAndClose(ymd) {\n      var _this = this;\n\n      this.localYMD = ymd; // Close calendar popup, unless `noCloseOnSelect`\n\n      if (!this.noCloseOnSelect) {\n        this.$nextTick(function () {\n          _this.$refs.control.hide(true);\n        });\n      }\n    },\n    onSelected: function onSelected(ymd) {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.setAndClose(ymd);\n      });\n    },\n    onInput: function onInput(ymd) {\n      if (this.localYMD !== ymd) {\n        this.localYMD = ymd;\n      }\n    },\n    onContext: function onContext(ctx) {\n      var activeYMD = ctx.activeYMD,\n          isRTL = ctx.isRTL,\n          locale = ctx.locale,\n          selectedYMD = ctx.selectedYMD,\n          selectedFormatted = ctx.selectedFormatted;\n      this.isRTL = isRTL;\n      this.localLocale = locale;\n      this.formattedValue = selectedFormatted;\n      this.localYMD = selectedYMD;\n      this.activeYMD = activeYMD; // Re-emit the context event\n\n      this.$emit(EVENT_NAME_CONTEXT, ctx);\n    },\n    onTodayButton: function onTodayButton() {\n      // Set to today (or min/max if today is out of range)\n      this.setAndClose(formatYMD(constrainDate(createDate(), this.min, this.max)));\n    },\n    onResetButton: function onResetButton() {\n      this.setAndClose(this.computedResetValue);\n    },\n    onCloseButton: function onCloseButton() {\n      this.$refs.control.hide(true);\n    },\n    // Menu handlers\n    onShow: function onShow() {\n      this.isVisible = true;\n    },\n    onShown: function onShown() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        attemptFocus(_this3.$refs.calendar);\n\n        _this3.$emit(EVENT_NAME_SHOWN);\n      });\n    },\n    onHidden: function onHidden() {\n      this.isVisible = false;\n      this.$emit(EVENT_NAME_HIDDEN);\n    },\n    // Render helpers\n    defaultButtonFn: function defaultButtonFn(_ref) {\n      var isHovered = _ref.isHovered,\n          hasFocus = _ref.hasFocus;\n      return this.$createElement(isHovered || hasFocus ? BIconCalendarFill : BIconCalendar, {\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      });\n    }\n  },\n  render: function render(h) {\n    var localYMD = this.localYMD,\n        disabled = this.disabled,\n        readonly = this.readonly,\n        dark = this.dark,\n        $props = this.$props,\n        $scopedSlots = this.$scopedSlots;\n    var placeholder = isUndefinedOrNull(this.placeholder) ? this.labelNoDateSelected : this.placeholder; // Optional footer buttons\n\n    var $footer = [];\n\n    if (this.todayButton) {\n      var label = this.labelTodayButton;\n      $footer.push(h(BButton, {\n        props: {\n          disabled: disabled || readonly,\n          size: 'sm',\n          variant: this.todayButtonVariant\n        },\n        attrs: {\n          'aria-label': label || null\n        },\n        on: {\n          click: this.onTodayButton\n        }\n      }, label));\n    }\n\n    if (this.resetButton) {\n      var _label = this.labelResetButton;\n      $footer.push(h(BButton, {\n        props: {\n          disabled: disabled || readonly,\n          size: 'sm',\n          variant: this.resetButtonVariant\n        },\n        attrs: {\n          'aria-label': _label || null\n        },\n        on: {\n          click: this.onResetButton\n        }\n      }, _label));\n    }\n\n    if (this.closeButton) {\n      var _label2 = this.labelCloseButton;\n      $footer.push(h(BButton, {\n        props: {\n          disabled: disabled,\n          size: 'sm',\n          variant: this.closeButtonVariant\n        },\n        attrs: {\n          'aria-label': _label2 || null\n        },\n        on: {\n          click: this.onCloseButton\n        }\n      }, _label2));\n    }\n\n    if ($footer.length > 0) {\n      $footer = [h('div', {\n        staticClass: 'b-form-date-controls d-flex flex-wrap',\n        class: {\n          'justify-content-between': $footer.length > 1,\n          'justify-content-end': $footer.length < 2\n        }\n      }, $footer)];\n    }\n\n    var $calendar = h(BCalendar, {\n      staticClass: 'b-form-date-calendar w-100',\n      props: _objectSpread(_objectSpread({}, pluckProps(calendarProps, $props)), {}, {\n        hidden: !this.isVisible,\n        value: localYMD,\n        valueAsDate: false,\n        width: this.calendarWidth\n      }),\n      on: {\n        selected: this.onSelected,\n        input: this.onInput,\n        context: this.onContext\n      },\n      scopedSlots: pick($scopedSlots, ['nav-prev-decade', 'nav-prev-year', 'nav-prev-month', 'nav-this-month', 'nav-next-month', 'nav-next-year', 'nav-next-decade']),\n      key: 'calendar',\n      ref: 'calendar'\n    }, $footer);\n    return h(BVFormBtnLabelControl, {\n      staticClass: 'b-form-datepicker',\n      props: _objectSpread(_objectSpread({}, pluckProps(formBtnLabelControlProps, $props)), {}, {\n        formattedValue: localYMD ? this.formattedValue : '',\n        id: this.safeId(),\n        lang: this.computedLang,\n        menuClass: [{\n          'bg-dark': dark,\n          'text-light': dark\n        }, this.menuClass],\n        placeholder: placeholder,\n        rtl: this.isRTL,\n        value: localYMD\n      }),\n      on: {\n        show: this.onShow,\n        shown: this.onShown,\n        hidden: this.onHidden\n      },\n      scopedSlots: _defineProperty({}, SLOT_NAME_BUTTON_CONTENT, $scopedSlots[SLOT_NAME_BUTTON_CONTENT] || this.defaultButtonFn),\n      ref: 'control'\n    }, [$calendar]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}