{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue } from '../../vue';\nimport { NAME_PAGINATION_NAV } from '../../constants/components';\nimport { IS_BROWSER } from '../../constants/env';\nimport { EVENT_NAME_CHANGE, EVENT_NAME_PAGE_CLICK } from '../../constants/events';\nimport { PROP_TYPE_ARRAY, PROP_TYPE_BOOLEAN, PROP_TYPE_FUNCTION, PROP_TYPE_NUMBER_STRING, PROP_TYPE_STRING } from '../../constants/props';\nimport { BvEvent } from '../../utils/bv-event.class';\nimport { attemptBlur, requestAF } from '../../utils/dom';\nimport { isArray, isUndefined, isObject } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { mathMax } from '../../utils/math';\nimport { toInteger } from '../../utils/number';\nimport { omit, sortKeys } from '../../utils/object';\nimport { hasPropFunction, makeProp, makePropsConfigurable, pluckProps } from '../../utils/props';\nimport { computeHref, parseQuery } from '../../utils/router';\nimport { toString } from '../../utils/string';\nimport { warn } from '../../utils/warn';\nimport { paginationMixin, props as paginationProps } from '../../mixins/pagination';\nimport { props as BLinkProps } from '../link/link'; // --- Helper methods ---\n// Sanitize the provided number of pages (converting to a number)\n\nexport var sanitizeNumberOfPages = function sanitizeNumberOfPages(value) {\n  return mathMax(toInteger(value, 0), 1);\n}; // --- Props ---\n\nvar _linkProps = omit(BLinkProps, ['event', 'routerTag']);\n\nvar props = makePropsConfigurable(sortKeys(_objectSpread(_objectSpread(_objectSpread({}, paginationProps), _linkProps), {}, {\n  baseUrl: makeProp(PROP_TYPE_STRING, '/'),\n  linkGen: makeProp(PROP_TYPE_FUNCTION),\n  // Disable auto page number detection if `true`\n  noPageDetect: makeProp(PROP_TYPE_BOOLEAN, false),\n  numberOfPages: makeProp(PROP_TYPE_NUMBER_STRING, 1,\n  /* istanbul ignore next */\n  function (value) {\n    var number = toInteger(value, 0);\n\n    if (number < 1) {\n      warn('Prop \"number-of-pages\" must be a number greater than \"0\"', NAME_PAGINATION_NAV);\n      return false;\n    }\n\n    return true;\n  }),\n  pageGen: makeProp(PROP_TYPE_FUNCTION),\n  // Optional array of page links\n  pages: makeProp(PROP_TYPE_ARRAY),\n  useRouter: makeProp(PROP_TYPE_BOOLEAN, false)\n})), NAME_PAGINATION_NAV); // --- Main component ---\n// @vue/component\n\nexport var BPaginationNav = /*#__PURE__*/Vue.extend({\n  name: NAME_PAGINATION_NAV,\n  // The render function is brought in via the pagination mixin\n  mixins: [paginationMixin],\n  props: props,\n  computed: {\n    // Used by render function to trigger wrapping in '<nav>' element\n    isNav: function isNav() {\n      return true;\n    },\n    computedValue: function computedValue() {\n      // Returns the value prop as a number or `null` if undefined or < 1\n      var value = toInteger(this.value, 0);\n      return value < 1 ? null : value;\n    }\n  },\n  watch: {\n    numberOfPages: function numberOfPages() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.setNumberOfPages();\n      });\n    },\n    pages: function pages() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.setNumberOfPages();\n      });\n    }\n  },\n  created: function created() {\n    this.setNumberOfPages();\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    if (this.$router) {\n      // We only add the watcher if vue router is detected\n      this.$watch('$route', function () {\n        _this3.$nextTick(function () {\n          requestAF(function () {\n            _this3.guessCurrentPage();\n          });\n        });\n      });\n    }\n  },\n  methods: {\n    setNumberOfPages: function setNumberOfPages() {\n      var _this4 = this;\n\n      if (isArray(this.pages) && this.pages.length > 0) {\n        this.localNumberOfPages = this.pages.length;\n      } else {\n        this.localNumberOfPages = sanitizeNumberOfPages(this.numberOfPages);\n      }\n\n      this.$nextTick(function () {\n        _this4.guessCurrentPage();\n      });\n    },\n    onClick: function onClick(event, pageNumber) {\n      var _this5 = this; // Dont do anything if clicking the current active page\n\n\n      if (pageNumber === this.currentPage) {\n        return;\n      }\n\n      var target = event.currentTarget || event.target; // Emit a user-cancelable `page-click` event\n\n      var clickEvent = new BvEvent(EVENT_NAME_PAGE_CLICK, {\n        cancelable: true,\n        vueTarget: this,\n        target: target\n      });\n      this.$emit(clickEvent.type, clickEvent, pageNumber);\n\n      if (clickEvent.defaultPrevented) {\n        return;\n      } // Update the `v-model`\n      // Done in in requestAF() to allow browser to complete the\n      // native browser click handling of a link\n\n\n      requestAF(function () {\n        _this5.currentPage = pageNumber;\n\n        _this5.$emit(EVENT_NAME_CHANGE, pageNumber);\n      }); // Emulate native link click page reloading behaviour by blurring the\n      // paginator and returning focus to the document\n      // Done in a `nextTick()` to ensure rendering complete\n\n      this.$nextTick(function () {\n        attemptBlur(target);\n      });\n    },\n    getPageInfo: function getPageInfo(pageNumber) {\n      if (!isArray(this.pages) || this.pages.length === 0 || isUndefined(this.pages[pageNumber - 1])) {\n        var link = \"\".concat(this.baseUrl).concat(pageNumber);\n        return {\n          link: this.useRouter ? {\n            path: link\n          } : link,\n          text: toString(pageNumber)\n        };\n      }\n\n      var info = this.pages[pageNumber - 1];\n\n      if (isObject(info)) {\n        var _link = info.link;\n        return {\n          // Normalize link for router use\n          link: isObject(_link) ? _link : this.useRouter ? {\n            path: _link\n          } : _link,\n          // Make sure text has a value\n          text: toString(info.text || pageNumber)\n        };\n      } else {\n        return {\n          link: toString(info),\n          text: toString(pageNumber)\n        };\n      }\n    },\n    makePage: function makePage(pageNumber) {\n      var pageGen = this.pageGen;\n      var info = this.getPageInfo(pageNumber);\n\n      if (hasPropFunction(pageGen)) {\n        return pageGen(pageNumber, info);\n      }\n\n      return info.text;\n    },\n    makeLink: function makeLink(pageNumber) {\n      var linkGen = this.linkGen;\n      var info = this.getPageInfo(pageNumber);\n\n      if (hasPropFunction(linkGen)) {\n        return linkGen(pageNumber, info);\n      }\n\n      return info.link;\n    },\n    linkProps: function linkProps(pageNumber) {\n      var props = pluckProps(_linkProps, this);\n      var link = this.makeLink(pageNumber);\n\n      if (this.useRouter || isObject(link)) {\n        props.to = link;\n      } else {\n        props.href = link;\n      }\n\n      return props;\n    },\n    resolveLink: function resolveLink() {\n      var to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ''; // Given a to (or href string), convert to normalized route-like structure\n      // Works only client side!\n\n      var link;\n\n      try {\n        // Convert the `to` to a HREF via a temporary `a` tag\n        link = document.createElement('a');\n        link.href = computeHref({\n          to: to\n        }, 'a', '/', '/'); // We need to add the anchor to the document to make sure the\n        // `pathname` is correctly detected in any browser (i.e. IE)\n\n        document.body.appendChild(link); // Once href is assigned, the link will be normalized to the full URL bits\n\n        var _link2 = link,\n            pathname = _link2.pathname,\n            hash = _link2.hash,\n            search = _link2.search; // Remove link from document\n\n        document.body.removeChild(link); // Return the location in a route-like object\n\n        return {\n          path: pathname,\n          hash: hash,\n          query: parseQuery(search)\n        };\n      } catch (e) {\n        /* istanbul ignore next */\n        try {\n          link && link.parentNode && link.parentNode.removeChild(link);\n        } catch (_unused) {}\n        /* istanbul ignore next */\n\n\n        return {};\n      }\n    },\n    resolveRoute: function resolveRoute() {\n      var to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ''; // Given a to (or href string), convert to normalized route location structure\n      // Works only when router available!\n\n      try {\n        var route = this.$router.resolve(to, this.$route).route;\n        return {\n          path: route.path,\n          hash: route.hash,\n          query: route.query\n        };\n      } catch (e) {\n        /* istanbul ignore next */\n        return {};\n      }\n    },\n    guessCurrentPage: function guessCurrentPage() {\n      var $router = this.$router,\n          $route = this.$route;\n      var guess = this.computedValue; // This section only occurs if we are client side, or server-side with `$router`\n\n      if (!this.noPageDetect && !guess && (IS_BROWSER || !IS_BROWSER && $router)) {\n        // Current route (if router available)\n        var currentRoute = $router && $route ? {\n          path: $route.path,\n          hash: $route.hash,\n          query: $route.query\n        } : {}; // Current page full HREF (if client side)\n        // Can't be done as a computed prop!\n\n        var loc = IS_BROWSER ? window.location || document.location : null;\n        var currentLink = loc ? {\n          path: loc.pathname,\n          hash: loc.hash,\n          query: parseQuery(loc.search)\n        } :\n        /* istanbul ignore next */\n        {}; // Loop through the possible pages looking for a match until found\n\n        for (var pageNumber = 1; !guess && pageNumber <= this.localNumberOfPages; pageNumber++) {\n          var to = this.makeLink(pageNumber);\n\n          if ($router && (isObject(to) || this.useRouter)) {\n            // Resolve the page via the `$router`\n            guess = looseEqual(this.resolveRoute(to), currentRoute) ? pageNumber : null;\n          } else if (IS_BROWSER) {\n            // If no `$router` available (or `!this.useRouter` when `to` is a string)\n            // we compare using parsed URIs\n            guess = looseEqual(this.resolveLink(to), currentLink) ? pageNumber : null;\n          } else {\n            // Probably SSR, but no `$router` so we can't guess,\n            // so lets break out of the loop early\n\n            /* istanbul ignore next */\n            guess = -1;\n          }\n        }\n      } // We set `currentPage` to `0` to trigger an `$emit('input', null)`\n      // As the default for `currentPage` is `-1` when no value is specified\n      // Valid page numbers are greater than `0`\n\n\n      this.currentPage = guess > 0 ? guess : 0;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}