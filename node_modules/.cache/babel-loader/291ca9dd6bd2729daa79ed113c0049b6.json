{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue, mergeData } from '../../vue';\nimport { NAME_ICON_BASE } from '../../constants/components';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_NUMBER_STRING, PROP_TYPE_STRING } from '../../constants/props';\nimport { identity } from '../../utils/identity';\nimport { isUndefinedOrNull } from '../../utils/inspect';\nimport { mathMax } from '../../utils/math';\nimport { toFloat } from '../../utils/number';\nimport { makeProp } from '../../utils/props'; // --- Constants ---\n// Base attributes needed on all icons\n\nvar BASE_ATTRS = {\n  viewBox: '0 0 16 16',\n  width: '1em',\n  height: '1em',\n  focusable: 'false',\n  role: 'img',\n  'aria-label': 'icon'\n}; // Attributes that are nulled out when stacked\n\nvar STACKED_ATTRS = {\n  width: null,\n  height: null,\n  focusable: null,\n  role: null,\n  'aria-label': null\n}; // --- Props ---\n\nexport var props = {\n  animation: makeProp(PROP_TYPE_STRING),\n  content: makeProp(PROP_TYPE_STRING),\n  flipH: makeProp(PROP_TYPE_BOOLEAN, false),\n  flipV: makeProp(PROP_TYPE_BOOLEAN, false),\n  fontScale: makeProp(PROP_TYPE_NUMBER_STRING, 1),\n  rotate: makeProp(PROP_TYPE_NUMBER_STRING, 0),\n  scale: makeProp(PROP_TYPE_NUMBER_STRING, 1),\n  shiftH: makeProp(PROP_TYPE_NUMBER_STRING, 0),\n  shiftV: makeProp(PROP_TYPE_NUMBER_STRING, 0),\n  stacked: makeProp(PROP_TYPE_BOOLEAN, false),\n  title: makeProp(PROP_TYPE_STRING),\n  variant: makeProp(PROP_TYPE_STRING)\n}; // --- Main component ---\n// Shared private base component to reduce bundle/runtime size\n// @vue/component\n\nexport var BVIconBase = /*#__PURE__*/Vue.extend({\n  name: NAME_ICON_BASE,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var _class;\n\n    var data = _ref.data,\n        props = _ref.props,\n        children = _ref.children;\n    var animation = props.animation,\n        content = props.content,\n        flipH = props.flipH,\n        flipV = props.flipV,\n        stacked = props.stacked,\n        title = props.title,\n        variant = props.variant;\n    var fontScale = mathMax(toFloat(props.fontScale, 1), 0) || 1;\n    var scale = mathMax(toFloat(props.scale, 1), 0) || 1;\n    var rotate = toFloat(props.rotate, 0);\n    var shiftH = toFloat(props.shiftH, 0);\n    var shiftV = toFloat(props.shiftV, 0); // Compute the transforms\n    // Note that order is important as SVG transforms are applied in order from\n    // left to right and we want flipping/scale to occur before rotation\n    // Note shifting is applied separately\n    // Assumes that the viewbox is `0 0 16 16` (`8 8` is the center)\n\n    var hasScale = flipH || flipV || scale !== 1;\n    var hasTransforms = hasScale || rotate;\n    var hasShift = shiftH || shiftV;\n    var hasContent = !isUndefinedOrNull(content);\n    var transforms = [hasTransforms ? 'translate(8 8)' : null, hasScale ? \"scale(\".concat((flipH ? -1 : 1) * scale, \" \").concat((flipV ? -1 : 1) * scale, \")\") : null, rotate ? \"rotate(\".concat(rotate, \")\") : null, hasTransforms ? 'translate(-8 -8)' : null].filter(identity); // We wrap the content in a `<g>` for handling the transforms (except shift)\n\n    var $inner = h('g', {\n      attrs: {\n        transform: transforms.join(' ') || null\n      },\n      domProps: hasContent ? {\n        innerHTML: content || ''\n      } : {}\n    }, children); // If needed, we wrap in an additional `<g>` in order to handle the shifting\n\n    if (hasShift) {\n      $inner = h('g', {\n        attrs: {\n          transform: \"translate(\".concat(16 * shiftH / 16, \" \").concat(-16 * shiftV / 16, \")\")\n        }\n      }, [$inner]);\n    } // Wrap in an additional `<g>` for proper animation handling if stacked\n\n\n    if (stacked) {\n      $inner = h('g', [$inner]);\n    }\n\n    var $title = title ? h('title', title) : null;\n    var $content = [$title, $inner].filter(identity);\n    return h('svg', mergeData({\n      staticClass: 'b-icon bi',\n      class: (_class = {}, _defineProperty(_class, \"text-\".concat(variant), variant), _defineProperty(_class, \"b-icon-animation-\".concat(animation), animation), _class),\n      attrs: BASE_ATTRS,\n      style: stacked ? {} : {\n        fontSize: fontScale === 1 ? null : \"\".concat(fontScale * 100, \"%\")\n      }\n    }, // Merge in user supplied data\n    data, // If icon is stacked, null-out some attrs\n    stacked ? {\n      attrs: STACKED_ATTRS\n    } : {}, // These cannot be overridden by users\n    {\n      attrs: {\n        xmlns: stacked ? null : 'http://www.w3.org/2000/svg',\n        fill: 'currentColor'\n      }\n    }), $content);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}