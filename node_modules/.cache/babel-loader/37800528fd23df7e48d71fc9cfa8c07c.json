{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} //\n// Private component used by `b-form-datepicker` and `b-form-timepicker`\n//\n\n\nimport { Vue } from '../../vue';\nimport { NAME_FORM_BUTTON_LABEL_CONTROL } from '../../constants/components';\nimport { PROP_TYPE_ARRAY_OBJECT_STRING, PROP_TYPE_BOOLEAN, PROP_TYPE_STRING } from '../../constants/props';\nimport { SLOT_NAME_BUTTON_CONTENT, SLOT_NAME_DEFAULT } from '../../constants/slots';\nimport { attemptBlur, attemptFocus } from '../../utils/dom';\nimport { stopEvent } from '../../utils/events';\nimport { omit, sortKeys } from '../../utils/object';\nimport { makeProp } from '../../utils/props';\nimport { toString } from '../../utils/string';\nimport { dropdownMixin, props as dropdownProps } from '../../mixins/dropdown';\nimport { props as formControlProps } from '../../mixins/form-control';\nimport { formSizeMixin, props as formSizeProps } from '../../mixins/form-size';\nimport { formStateMixin, props as formStateProps } from '../../mixins/form-state';\nimport { idMixin, props as idProps } from '../../mixins/id';\nimport { normalizeSlotMixin } from '../../mixins/normalize-slot';\nimport { VBHover } from '../../directives/hover/hover';\nimport { BIconChevronDown } from '../../icons/icons'; // --- Props ---\n\nexport var props = sortKeys(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, idProps), formSizeProps), formStateProps), omit(dropdownProps, ['disabled'])), omit(formControlProps, ['autofocus'])), {}, {\n  // When `true`, renders a `btn-group` wrapper and visually hides the label\n  buttonOnly: makeProp(PROP_TYPE_BOOLEAN, false),\n  // Applicable in button mode only\n  buttonVariant: makeProp(PROP_TYPE_STRING, 'secondary'),\n  // This is the value shown in the label\n  // Defaults back to `value`\n  formattedValue: makeProp(PROP_TYPE_STRING),\n  // Value placed in `.sr-only` span inside label when value is present\n  labelSelected: makeProp(PROP_TYPE_STRING),\n  lang: makeProp(PROP_TYPE_STRING),\n  // Extra classes to apply to the `dropdown-menu` div\n  menuClass: makeProp(PROP_TYPE_ARRAY_OBJECT_STRING),\n  // This is the value placed on the hidden input when no value selected\n  placeholder: makeProp(PROP_TYPE_STRING),\n  readonly: makeProp(PROP_TYPE_BOOLEAN, false),\n  // Tri-state prop: `true`, `false` or `null`\n  rtl: makeProp(PROP_TYPE_BOOLEAN, null),\n  value: makeProp(PROP_TYPE_STRING, '')\n})); // --- Main component ---\n// @vue/component\n\nexport var BVFormBtnLabelControl = /*#__PURE__*/Vue.extend({\n  name: NAME_FORM_BUTTON_LABEL_CONTROL,\n  directives: {\n    'b-hover': VBHover\n  },\n  mixins: [idMixin, formSizeMixin, formStateMixin, dropdownMixin, normalizeSlotMixin],\n  props: props,\n  data: function data() {\n    return {\n      isHovered: false,\n      hasFocus: false\n    };\n  },\n  computed: {\n    idButton: function idButton() {\n      return this.safeId();\n    },\n    idLabel: function idLabel() {\n      return this.safeId('_value_');\n    },\n    idMenu: function idMenu() {\n      return this.safeId('_dialog_');\n    },\n    idWrapper: function idWrapper() {\n      return this.safeId('_outer_');\n    },\n    computedDir: function computedDir() {\n      return this.rtl === true ? 'rtl' : this.rtl === false ? 'ltr' : null;\n    }\n  },\n  methods: {\n    focus: function focus() {\n      if (!this.disabled) {\n        attemptFocus(this.$refs.toggle);\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        attemptBlur(this.$refs.toggle);\n      }\n    },\n    setFocus: function setFocus(event) {\n      this.hasFocus = event.type === 'focus';\n    },\n    handleHover: function handleHover(hovered) {\n      this.isHovered = hovered;\n    }\n  },\n  render: function render(h) {\n    var _class;\n\n    var idButton = this.idButton,\n        idLabel = this.idLabel,\n        idMenu = this.idMenu,\n        idWrapper = this.idWrapper,\n        disabled = this.disabled,\n        readonly = this.readonly,\n        required = this.required,\n        name = this.name,\n        state = this.state,\n        visible = this.visible,\n        size = this.size,\n        isHovered = this.isHovered,\n        hasFocus = this.hasFocus,\n        labelSelected = this.labelSelected,\n        buttonVariant = this.buttonVariant,\n        buttonOnly = this.buttonOnly;\n    var value = toString(this.value) || '';\n    var invalid = state === false || required && !value;\n    var btnScope = {\n      isHovered: isHovered,\n      hasFocus: hasFocus,\n      state: state,\n      opened: visible\n    };\n    var $button = h('button', {\n      staticClass: 'btn',\n      class: (_class = {}, _defineProperty(_class, \"btn-\".concat(buttonVariant), buttonOnly), _defineProperty(_class, \"btn-\".concat(size), size), _defineProperty(_class, 'h-auto', !buttonOnly), _defineProperty(_class, 'dropdown-toggle', buttonOnly), _defineProperty(_class, 'dropdown-toggle-no-caret', buttonOnly), _class),\n      attrs: {\n        id: idButton,\n        type: 'button',\n        disabled: disabled,\n        'aria-haspopup': 'dialog',\n        'aria-expanded': visible ? 'true' : 'false',\n        'aria-invalid': invalid ? 'true' : null,\n        'aria-required': required ? 'true' : null\n      },\n      directives: [{\n        name: 'b-hover',\n        value: this.handleHover\n      }],\n      on: {\n        mousedown: this.onMousedown,\n        click: this.toggle,\n        keydown: this.toggle,\n        // Handle ENTER, SPACE and DOWN\n        '!focus': this.setFocus,\n        '!blur': this.setFocus\n      },\n      ref: 'toggle'\n    }, [this.hasNormalizedSlot(SLOT_NAME_BUTTON_CONTENT) ? this.normalizeSlot(SLOT_NAME_BUTTON_CONTENT, btnScope) :\n    /* istanbul ignore next */\n    h(BIconChevronDown, {\n      props: {\n        scale: 1.25\n      }\n    })]); // Hidden input\n\n    var $hidden = h();\n\n    if (name && !disabled) {\n      $hidden = h('input', {\n        attrs: {\n          type: 'hidden',\n          name: name || null,\n          form: this.form || null,\n          value: value\n        }\n      });\n    } // Dropdown content\n\n\n    var $menu = h('div', {\n      staticClass: 'dropdown-menu',\n      class: [this.menuClass, {\n        show: visible,\n        'dropdown-menu-right': this.right\n      }],\n      attrs: {\n        id: idMenu,\n        role: 'dialog',\n        tabindex: '-1',\n        'aria-modal': 'false',\n        'aria-labelledby': idLabel\n      },\n      on: {\n        keydown: this.onKeydown // Handle ESC\n\n      },\n      ref: 'menu'\n    }, [this.normalizeSlot(SLOT_NAME_DEFAULT, {\n      opened: visible\n    })]); // Value label\n\n    var $label = h('label', {\n      class: buttonOnly ? 'sr-only' // Hidden in button only mode\n      : ['form-control', // Mute the text if showing the placeholder\n      {\n        'text-muted': !value\n      }, this.stateClass, this.sizeFormClass],\n      attrs: {\n        id: idLabel,\n        for: idButton,\n        'aria-invalid': invalid ? 'true' : null,\n        'aria-required': required ? 'true' : null\n      },\n      directives: [{\n        name: 'b-hover',\n        value: this.handleHover\n      }],\n      on: {\n        // Disable bubbling of the click event to\n        // prevent menu from closing and re-opening\n        '!click':\n        /* istanbul ignore next */\n        function click(event) {\n          stopEvent(event, {\n            preventDefault: false\n          });\n        }\n      }\n    }, [value ? this.formattedValue || value : this.placeholder || '', // Add the selected label for screen readers when a value is provided\n    value && labelSelected ? h('bdi', {\n      staticClass: 'sr-only'\n    }, labelSelected) : '']); // Return the custom form control wrapper\n\n    return h('div', {\n      staticClass: 'b-form-btn-label-control dropdown',\n      class: [this.directionClass, this.boundaryClass, [{\n        'btn-group': buttonOnly,\n        'form-control': !buttonOnly,\n        focus: hasFocus && !buttonOnly,\n        show: visible,\n        'is-valid': state === true,\n        'is-invalid': state === false\n      }, buttonOnly ? null : this.sizeFormClass]],\n      attrs: {\n        id: idWrapper,\n        role: buttonOnly ? null : 'group',\n        lang: this.lang || null,\n        dir: this.computedDir,\n        'aria-disabled': disabled,\n        'aria-readonly': readonly && !disabled,\n        'aria-labelledby': idLabel,\n        'aria-invalid': state === false || required && !value ? 'true' : null,\n        'aria-required': required ? 'true' : null\n      }\n    }, [$button, $hidden, $menu, $label]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}