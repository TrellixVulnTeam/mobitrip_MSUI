{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue, mergeData } from '../../vue';\nimport { NAME_MEDIA_ASIDE } from '../../constants/components';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_STRING } from '../../constants/props';\nimport { makeProp, makePropsConfigurable } from '../../utils/props'; // --- Props ---\n\nexport var props = makePropsConfigurable({\n  right: makeProp(PROP_TYPE_BOOLEAN, false),\n  tag: makeProp(PROP_TYPE_STRING, 'div'),\n  verticalAlign: makeProp(PROP_TYPE_STRING, 'top')\n}, NAME_MEDIA_ASIDE); // --- Main component ---\n// @vue/component\n\nexport var BMediaAside = /*#__PURE__*/Vue.extend({\n  name: NAME_MEDIA_ASIDE,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var verticalAlign = props.verticalAlign;\n    var align = verticalAlign === 'top' ? 'start' : verticalAlign === 'bottom' ? 'end' :\n    /* istanbul ignore next */\n    verticalAlign;\n    return h(props.tag, mergeData(data, {\n      staticClass: 'media-aside',\n      class: _defineProperty({\n        'media-aside-right': props.right\n      }, \"align-self-\".concat(align), align)\n    }), children);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}