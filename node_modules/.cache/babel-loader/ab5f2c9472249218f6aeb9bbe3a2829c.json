{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue } from '../../../vue';\nimport { EVENT_NAME_CONTEXT_CHANGED, EVENT_NAME_FILTERED, EVENT_NAME_ROW_CLICKED, EVENT_NAME_ROW_SELECTED } from '../../../constants/events';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_STRING } from '../../../constants/props';\nimport { arrayIncludes, createArray } from '../../../utils/array';\nimport { identity } from '../../../utils/identity';\nimport { isArray, isNumber } from '../../../utils/inspect';\nimport { looseEqual } from '../../../utils/loose-equal';\nimport { mathMax, mathMin } from '../../../utils/math';\nimport { makeProp } from '../../../utils/props';\nimport { toString } from '../../../utils/string';\nimport { sanitizeRow } from './sanitize-row'; // --- Constants ---\n\nvar SELECT_MODES = ['range', 'multi', 'single'];\nvar ROLE_GRID = 'grid'; // --- Props ---\n\nexport var props = {\n  // Disable use of click handlers for row selection\n  noSelectOnClick: makeProp(PROP_TYPE_BOOLEAN, false),\n  selectMode: makeProp(PROP_TYPE_STRING, 'multi', function (value) {\n    return arrayIncludes(SELECT_MODES, value);\n  }),\n  selectable: makeProp(PROP_TYPE_BOOLEAN, false),\n  selectedVariant: makeProp(PROP_TYPE_STRING, 'active')\n}; // --- Mixin ---\n// @vue/component\n\nexport var selectableMixin = Vue.extend({\n  props: props,\n  data: function data() {\n    return {\n      selectedRows: [],\n      selectedLastRow: -1\n    };\n  },\n  computed: {\n    isSelectable: function isSelectable() {\n      return this.selectable && this.selectMode;\n    },\n    hasSelectableRowClick: function hasSelectableRowClick() {\n      return this.isSelectable && !this.noSelectOnClick;\n    },\n    supportsSelectableRows: function supportsSelectableRows() {\n      return true;\n    },\n    selectableHasSelection: function selectableHasSelection() {\n      var selectedRows = this.selectedRows;\n      return this.isSelectable && selectedRows && selectedRows.length > 0 && selectedRows.some(identity);\n    },\n    selectableIsMultiSelect: function selectableIsMultiSelect() {\n      return this.isSelectable && arrayIncludes(['range', 'multi'], this.selectMode);\n    },\n    selectableTableClasses: function selectableTableClasses() {\n      var _ref;\n\n      var isSelectable = this.isSelectable;\n      return _ref = {\n        'b-table-selectable': isSelectable\n      }, _defineProperty(_ref, \"b-table-select-\".concat(this.selectMode), isSelectable), _defineProperty(_ref, 'b-table-selecting', this.selectableHasSelection), _defineProperty(_ref, 'b-table-selectable-no-click', isSelectable && !this.hasSelectableRowClick), _ref;\n    },\n    selectableTableAttrs: function selectableTableAttrs() {\n      if (!this.isSelectable) {\n        return {};\n      }\n\n      var role = this.bvAttrs.role || ROLE_GRID;\n      return {\n        role: role,\n        // TODO:\n        //   Should this attribute not be included when `no-select-on-click` is set\n        //   since this attribute implies keyboard navigation?\n        'aria-multiselectable': role === ROLE_GRID ? toString(this.selectableIsMultiSelect) : null\n      };\n    }\n  },\n  watch: {\n    computedItems: function computedItems(newValue, oldValue) {\n      // Reset for selectable\n      var equal = false;\n\n      if (this.isSelectable && this.selectedRows.length > 0) {\n        // Quick check against array length\n        equal = isArray(newValue) && isArray(oldValue) && newValue.length === oldValue.length;\n\n        for (var i = 0; equal && i < newValue.length; i++) {\n          // Look for the first non-loosely equal row, after ignoring reserved fields\n          equal = looseEqual(sanitizeRow(newValue[i]), sanitizeRow(oldValue[i]));\n        }\n      }\n\n      if (!equal) {\n        this.clearSelected();\n      }\n    },\n    selectable: function selectable(newValue) {\n      this.clearSelected();\n      this.setSelectionHandlers(newValue);\n    },\n    selectMode: function selectMode() {\n      this.clearSelected();\n    },\n    hasSelectableRowClick: function hasSelectableRowClick(newValue) {\n      this.clearSelected();\n      this.setSelectionHandlers(!newValue);\n    },\n    selectedRows: function selectedRows(_selectedRows, oldValue) {\n      var _this = this;\n\n      if (this.isSelectable && !looseEqual(_selectedRows, oldValue)) {\n        var items = []; // `.forEach()` skips over non-existent indices (on sparse arrays)\n\n        _selectedRows.forEach(function (v, idx) {\n          if (v) {\n            items.push(_this.computedItems[idx]);\n          }\n        });\n\n        this.$emit(EVENT_NAME_ROW_SELECTED, items);\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Set up handlers if needed\n    if (this.isSelectable) {\n      this.setSelectionHandlers(true);\n    }\n  },\n  methods: {\n    // Public methods\n    selectRow: function selectRow(index) {\n      // Select a particular row (indexed based on computedItems)\n      if (this.isSelectable && isNumber(index) && index >= 0 && index < this.computedItems.length && !this.isRowSelected(index)) {\n        var selectedRows = this.selectableIsMultiSelect ? this.selectedRows.slice() : [];\n        selectedRows[index] = true;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    unselectRow: function unselectRow(index) {\n      // Un-select a particular row (indexed based on `computedItems`)\n      if (this.isSelectable && isNumber(index) && this.isRowSelected(index)) {\n        var selectedRows = this.selectedRows.slice();\n        selectedRows[index] = false;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    selectAllRows: function selectAllRows() {\n      var length = this.computedItems.length;\n\n      if (this.isSelectable && length > 0) {\n        this.selectedLastClicked = -1;\n        this.selectedRows = this.selectableIsMultiSelect ? createArray(length, true) : [true];\n      }\n    },\n    isRowSelected: function isRowSelected(index) {\n      // Determine if a row is selected (indexed based on `computedItems`)\n      return !!(isNumber(index) && this.selectedRows[index]);\n    },\n    clearSelected: function clearSelected() {\n      // Clear any active selected row(s)\n      this.selectedLastClicked = -1;\n      this.selectedRows = [];\n    },\n    // Internal private methods\n    selectableRowClasses: function selectableRowClasses(index) {\n      if (this.isSelectable && this.isRowSelected(index)) {\n        var variant = this.selectedVariant;\n        return _defineProperty({\n          'b-table-row-selected': true\n        }, \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(variant), variant);\n      }\n\n      return {};\n    },\n    selectableRowAttrs: function selectableRowAttrs(index) {\n      return {\n        'aria-selected': !this.isSelectable ? null : this.isRowSelected(index) ? 'true' : 'false'\n      };\n    },\n    setSelectionHandlers: function setSelectionHandlers(on) {\n      var method = on && !this.noSelectOnClick ? '$on' : '$off'; // Handle row-clicked event\n\n      this[method](EVENT_NAME_ROW_CLICKED, this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n      this[method](EVENT_NAME_FILTERED, this.clearSelected);\n      this[method](EVENT_NAME_CONTEXT_CHANGED, this.clearSelected);\n    },\n    selectionHandler: function selectionHandler(item, index, event) {\n      /* istanbul ignore if: should never happen */\n      if (!this.isSelectable || this.noSelectOnClick) {\n        // Don't do anything if table is not in selectable mode\n        this.clearSelected();\n        return;\n      }\n\n      var selectMode = this.selectMode,\n          selectedLastRow = this.selectedLastRow;\n      var selectedRows = this.selectedRows.slice();\n      var selected = !selectedRows[index]; // Note 'multi' mode needs no special event handling\n\n      if (selectMode === 'single') {\n        selectedRows = [];\n      } else if (selectMode === 'range') {\n        if (selectedLastRow > -1 && event.shiftKey) {\n          // range\n          for (var idx = mathMin(selectedLastRow, index); idx <= mathMax(selectedLastRow, index); idx++) {\n            selectedRows[idx] = true;\n          }\n\n          selected = true;\n        } else {\n          if (!(event.ctrlKey || event.metaKey)) {\n            // Clear range selection if any\n            selectedRows = [];\n            selected = true;\n          }\n\n          if (selected) this.selectedLastRow = index;\n        }\n      }\n\n      selectedRows[index] = selected;\n      this.selectedRows = selectedRows;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}