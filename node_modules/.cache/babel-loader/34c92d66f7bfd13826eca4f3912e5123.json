{"ast":null,"code":"var _watch;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { COMPONENT_UID_KEY, Vue } from '../../vue';\nimport { NAME_ALERT } from '../../constants/components';\nimport { EVENT_NAME_DISMISSED, EVENT_NAME_DISMISS_COUNT_DOWN } from '../../constants/events';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_BOOLEAN_NUMBER_STRING, PROP_TYPE_STRING } from '../../constants/props';\nimport { SLOT_NAME_DISMISS } from '../../constants/slots';\nimport { requestAF } from '../../utils/dom';\nimport { isBoolean, isNumeric } from '../../utils/inspect';\nimport { makeModelMixin } from '../../utils/model';\nimport { toInteger } from '../../utils/number';\nimport { sortKeys } from '../../utils/object';\nimport { makeProp, makePropsConfigurable } from '../../utils/props';\nimport { normalizeSlotMixin } from '../../mixins/normalize-slot';\nimport { BButtonClose } from '../button/button-close';\nimport { BVTransition } from '../transition/bv-transition'; // --- Constants ---\n\nvar _makeModelMixin = makeModelMixin('show', {\n  type: PROP_TYPE_BOOLEAN_NUMBER_STRING,\n  defaultValue: false\n}),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event; // --- Helper methods ---\n// Convert `show` value to a number\n\n\nvar parseCountDown = function parseCountDown(show) {\n  if (show === '' || isBoolean(show)) {\n    return 0;\n  }\n\n  show = toInteger(show, 0);\n  return show > 0 ? show : 0;\n}; // Convert `show` value to a boolean\n\n\nvar parseShow = function parseShow(show) {\n  if (show === '' || show === true) {\n    return true;\n  }\n\n  if (toInteger(show, 0) < 1) {\n    // Boolean will always return false for the above comparison\n    return false;\n  }\n\n  return !!show;\n}; // --- Props ---\n\n\nexport var props = makePropsConfigurable(sortKeys(_objectSpread(_objectSpread({}, modelProps), {}, {\n  dismissLabel: makeProp(PROP_TYPE_STRING, 'Close'),\n  dismissible: makeProp(PROP_TYPE_BOOLEAN, false),\n  fade: makeProp(PROP_TYPE_BOOLEAN, false),\n  variant: makeProp(PROP_TYPE_STRING, 'info')\n})), NAME_ALERT); // --- Main component ---\n// @vue/component\n\nexport var BAlert = /*#__PURE__*/Vue.extend({\n  name: NAME_ALERT,\n  mixins: [modelMixin, normalizeSlotMixin],\n  props: props,\n  data: function data() {\n    return {\n      countDown: 0,\n      // If initially shown, we need to set these for SSR\n      localShow: parseShow(this[MODEL_PROP_NAME])\n    };\n  },\n  watch: (_watch = {}, _defineProperty(_watch, MODEL_PROP_NAME, function (newValue) {\n    this.countDown = parseCountDown(newValue);\n    this.localShow = parseShow(newValue);\n  }), _defineProperty(_watch, \"countDown\", function countDown(newValue) {\n    var _this = this;\n\n    this.clearCountDownInterval();\n    var show = this[MODEL_PROP_NAME]; // Ignore if `show` transitions to a boolean value\n\n    if (isNumeric(show)) {\n      this.$emit(EVENT_NAME_DISMISS_COUNT_DOWN, newValue); // Update the v-model if needed\n\n      if (show !== newValue) {\n        this.$emit(MODEL_EVENT_NAME, newValue);\n      }\n\n      if (newValue > 0) {\n        this.localShow = true;\n        this.$_countDownTimeout = setTimeout(function () {\n          _this.countDown--;\n        }, 1000);\n      } else {\n        // Slightly delay the hide to allow any UI updates\n        this.$nextTick(function () {\n          requestAF(function () {\n            _this.localShow = false;\n          });\n        });\n      }\n    }\n  }), _defineProperty(_watch, \"localShow\", function localShow(newValue) {\n    var show = this[MODEL_PROP_NAME]; // Only emit dismissed events for dismissible or auto-dismissing alerts\n\n    if (!newValue && (this.dismissible || isNumeric(show))) {\n      this.$emit(EVENT_NAME_DISMISSED);\n    } // Only emit booleans if we weren't passed a number via v-model\n\n\n    if (!isNumeric(show) && show !== newValue) {\n      this.$emit(MODEL_EVENT_NAME, newValue);\n    }\n  }), _watch),\n  created: function created() {\n    // Create private non-reactive props\n    this.$_filterTimer = null;\n    var show = this[MODEL_PROP_NAME];\n    this.countDown = parseCountDown(show);\n    this.localShow = parseShow(show);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.clearCountDownInterval();\n  },\n  methods: {\n    dismiss: function dismiss() {\n      this.clearCountDownInterval();\n      this.countDown = 0;\n      this.localShow = false;\n    },\n    clearCountDownInterval: function clearCountDownInterval() {\n      clearTimeout(this.$_countDownTimeout);\n      this.$_countDownTimeout = null;\n    }\n  },\n  render: function render(h) {\n    var $alert = h();\n\n    if (this.localShow) {\n      var dismissible = this.dismissible,\n          variant = this.variant;\n      var $dismissButton = h();\n\n      if (dismissible) {\n        // Add dismiss button\n        $dismissButton = h(BButtonClose, {\n          attrs: {\n            'aria-label': this.dismissLabel\n          },\n          on: {\n            click: this.dismiss\n          }\n        }, [this.normalizeSlot(SLOT_NAME_DISMISS)]);\n      }\n\n      $alert = h('div', {\n        staticClass: 'alert',\n        class: _defineProperty({\n          'alert-dismissible': dismissible\n        }, \"alert-\".concat(variant), variant),\n        attrs: {\n          role: 'alert',\n          'aria-live': 'polite',\n          'aria-atomic': true\n        },\n        key: this[COMPONENT_UID_KEY]\n      }, [$dismissButton, this.normalizeSlot()]);\n    }\n\n    return h(BVTransition, {\n      props: {\n        noFade: !this.fade\n      }\n    }, [$alert]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}