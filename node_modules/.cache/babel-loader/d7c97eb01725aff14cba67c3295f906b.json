{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue, mergeData } from '../../vue';\nimport { NAME_NAV_FORM } from '../../constants/components';\nimport { PROP_TYPE_ARRAY_OBJECT_STRING } from '../../constants/props';\nimport { omit, sortKeys } from '../../utils/object';\nimport { makeProp, makePropsConfigurable, pluckProps } from '../../utils/props';\nimport { BForm, props as BFormProps } from '../form/form'; // --- Props ---\n\nvar formProps = omit(BFormProps, ['inline']);\nexport var props = makePropsConfigurable(sortKeys(_objectSpread(_objectSpread({}, formProps), {}, {\n  formClass: makeProp(PROP_TYPE_ARRAY_OBJECT_STRING)\n})), NAME_NAV_FORM); // --- Main component ---\n// @vue/component\n\nexport var BNavForm = /*#__PURE__*/Vue.extend({\n  name: NAME_NAV_FORM,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children,\n        listeners = _ref.listeners;\n    var $form = h(BForm, {\n      class: props.formClass,\n      props: _objectSpread(_objectSpread({}, pluckProps(formProps, props)), {}, {\n        inline: true\n      }),\n      attrs: data.attrs,\n      on: listeners\n    }, children);\n    return h('li', mergeData(omit(data, ['attrs', 'on']), {\n      staticClass: 'form-inline'\n    }), [$form]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}