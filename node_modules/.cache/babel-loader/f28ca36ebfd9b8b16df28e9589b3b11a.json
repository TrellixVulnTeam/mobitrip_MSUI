{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue, mergeData } from '../../vue';\nimport { NAME_SKELETON_ICON } from '../../constants/components';\nimport { PROP_TYPE_OBJECT, PROP_TYPE_STRING } from '../../constants/props';\nimport { makeProp, makePropsConfigurable } from '../../utils/props';\nimport { BIcon } from '../../icons'; // --- Props ---\n\nexport var props = makePropsConfigurable({\n  animation: makeProp(PROP_TYPE_STRING, 'wave'),\n  icon: makeProp(PROP_TYPE_STRING),\n  iconProps: makeProp(PROP_TYPE_OBJECT, {})\n}, NAME_SKELETON_ICON); // --- Main component ---\n// @vue/component\n\nexport var BSkeletonIcon = /*#__PURE__*/Vue.extend({\n  name: NAME_SKELETON_ICON,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var data = _ref.data,\n        props = _ref.props;\n    var icon = props.icon,\n        animation = props.animation;\n    var $icon = h(BIcon, {\n      staticClass: 'b-skeleton-icon',\n      props: _objectSpread(_objectSpread({}, props.iconProps), {}, {\n        icon: icon\n      })\n    });\n    return h('div', mergeData(data, {\n      staticClass: 'b-skeleton-icon-wrapper position-relative d-inline-block overflow-hidden',\n      class: _defineProperty({}, \"b-skeleton-animate-\".concat(animation), animation)\n    }), [$icon]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}