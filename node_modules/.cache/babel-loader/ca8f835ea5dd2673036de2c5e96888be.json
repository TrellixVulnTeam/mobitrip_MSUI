{"ast":null,"code":"import { concat } from './array';\nimport { identity } from './identity';\nimport { isFunction } from './inspect'; // Note for functional components:\n// In functional components, `slots` is a function so it must be called\n// first before passing to the below methods. `scopedSlots` is always an\n// object and may be undefined (for Vue < 2.6.x)\n\n/**\n * Returns true if either scoped or unscoped named slot exists\n *\n * @param {String, Array} name or name[]\n * @param {Object} scopedSlots\n * @param {Object} slots\n * @returns {Array|undefined} VNodes\n */\n\nexport var hasNormalizedSlot = function hasNormalizedSlot(names) {\n  var $scopedSlots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var $slots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // Ensure names is an array\n\n  names = concat(names).filter(identity); // Returns true if the either a $scopedSlot or $slot exists with the specified name\n\n  return names.some(function (name) {\n    return $scopedSlots[name] || $slots[name];\n  });\n};\n/**\n * Returns VNodes for named slot either scoped or unscoped\n *\n * @param {String, Array} name or name[]\n * @param {String} scope\n * @param {Object} scopedSlots\n * @param {Object} slots\n * @returns {Array|undefined} VNodes\n */\n\nexport var normalizeSlot = function normalizeSlot(names) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var $scopedSlots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var $slots = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}; // Ensure names is an array\n\n  names = concat(names).filter(identity);\n  var slot;\n\n  for (var i = 0; i < names.length && !slot; i++) {\n    var name = names[i];\n    slot = $scopedSlots[name] || $slots[name];\n  } // Note: in Vue 2.6.x, all named slots are also scoped slots\n\n\n  return isFunction(slot) ? slot(scope) : slot;\n};","map":null,"metadata":{},"sourceType":"module"}