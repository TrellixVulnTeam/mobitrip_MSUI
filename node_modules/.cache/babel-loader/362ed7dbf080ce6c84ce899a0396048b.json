{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { isObject } from './inspect'; // --- Static ---\n\nexport var assign = function assign() {\n  return Object.assign.apply(Object, arguments);\n};\nexport var create = function create(proto, optionalProps) {\n  return Object.create(proto, optionalProps);\n};\nexport var defineProperties = function defineProperties(obj, props) {\n  return Object.defineProperties(obj, props);\n};\nexport var defineProperty = function defineProperty(obj, prop, descriptor) {\n  return Object.defineProperty(obj, prop, descriptor);\n};\nexport var freeze = function freeze(obj) {\n  return Object.freeze(obj);\n};\nexport var getOwnPropertyNames = function getOwnPropertyNames(obj) {\n  return Object.getOwnPropertyNames(obj);\n};\nexport var getOwnPropertyDescriptor = function getOwnPropertyDescriptor(obj, prop) {\n  return Object.getOwnPropertyDescriptor(obj, prop);\n};\nexport var getOwnPropertySymbols = function getOwnPropertySymbols(obj) {\n  return Object.getOwnPropertySymbols(obj);\n};\nexport var getPrototypeOf = function getPrototypeOf(obj) {\n  return Object.getPrototypeOf(obj);\n};\nexport var is = function is(value1, value2) {\n  return Object.is(value1, value2);\n};\nexport var isFrozen = function isFrozen(obj) {\n  return Object.isFrozen(obj);\n};\nexport var keys = function keys(obj) {\n  return Object.keys(obj);\n}; // --- \"Instance\" ---\n\nexport var hasOwnProperty = function hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\nexport var toString = function toString(obj) {\n  return Object.prototype.toString.call(obj);\n}; // --- Utilities ---\n// Shallow copy an object\n\nexport var clone = function clone(obj) {\n  return _objectSpread({}, obj);\n}; // Return a shallow copy of object with the specified properties only\n// See: https://gist.github.com/bisubus/2da8af7e801ffd813fab7ac221aa7afc\n\nexport var pick = function pick(obj, props) {\n  return keys(obj).filter(function (key) {\n    return props.indexOf(key) !== -1;\n  }).reduce(function (result, key) {\n    return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, key, obj[key]));\n  }, {});\n}; // Return a shallow copy of object with the specified properties omitted\n// See: https://gist.github.com/bisubus/2da8af7e801ffd813fab7ac221aa7afc\n\nexport var omit = function omit(obj, props) {\n  return keys(obj).filter(function (key) {\n    return props.indexOf(key) === -1;\n  }).reduce(function (result, key) {\n    return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, key, obj[key]));\n  }, {});\n}; // Merges two object deeply together\n// See: https://gist.github.com/Salakar/1d7137de9cb8b704e48a\n\nexport var mergeDeep = function mergeDeep(target, source) {\n  if (isObject(target) && isObject(source)) {\n    keys(source).forEach(function (key) {\n      if (isObject(source[key])) {\n        if (!target[key] || !isObject(target[key])) {\n          target[key] = source[key];\n        }\n\n        mergeDeep(target[key], source[key]);\n      } else {\n        assign(target, _defineProperty({}, key, source[key]));\n      }\n    });\n  }\n\n  return target;\n}; // Returns a shallow copy of the object with keys in sorted order\n\nexport var sortKeys = function sortKeys(obj) {\n  return keys(obj).sort().reduce(function (result, key) {\n    return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, key, obj[key]));\n  }, {});\n}; // Convenience method to create a read-only descriptor\n\nexport var readonlyDescriptor = function readonlyDescriptor() {\n  return {\n    enumerable: true,\n    configurable: false,\n    writable: false\n  };\n};","map":null,"metadata":{},"sourceType":"module"}