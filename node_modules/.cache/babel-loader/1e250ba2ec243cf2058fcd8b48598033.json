{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue } from '../vue';\nimport { cloneDeep } from './clone-deep';\nimport { looseEqual } from './loose-equal';\nimport { hasOwnProperty, keys } from './object';\n\nvar isEmpty = function isEmpty(value) {\n  return !value || keys(value).length === 0;\n};\n\nexport var makePropWatcher = function makePropWatcher(propName) {\n  return {\n    handler: function handler(newValue, oldValue) {\n      if (looseEqual(newValue, oldValue)) {\n        return;\n      }\n\n      if (isEmpty(newValue) || isEmpty(oldValue)) {\n        this[propName] = cloneDeep(newValue);\n        return;\n      }\n\n      for (var key in oldValue) {\n        if (!hasOwnProperty(newValue, key)) {\n          this.$delete(this.$data[propName], key);\n        }\n      }\n\n      for (var _key in newValue) {\n        this.$set(this.$data[propName], _key, newValue[_key]);\n      }\n    }\n  };\n};\nexport var makePropCacheMixin = function makePropCacheMixin(propName, proxyPropName) {\n  return Vue.extend({\n    data: function data() {\n      return _defineProperty({}, proxyPropName, cloneDeep(this[propName]));\n    },\n    watch: _defineProperty({}, propName, makePropWatcher(proxyPropName))\n  });\n};","map":null,"metadata":{},"sourceType":"module"}