{"ast":null,"code":"import { Vue } from '../../vue';\nimport { NAME_BUTTON_TOOLBAR } from '../../constants/components';\nimport { PROP_TYPE_BOOLEAN } from '../../constants/props';\nimport { CODE_DOWN, CODE_LEFT, CODE_RIGHT, CODE_UP } from '../../constants/key-codes';\nimport { attemptFocus, contains, isVisible, selectAll } from '../../utils/dom';\nimport { stopEvent } from '../../utils/events';\nimport { makeProp, makePropsConfigurable } from '../../utils/props';\nimport { normalizeSlotMixin } from '../../mixins/normalize-slot'; // --- Constants ---\n\nvar ITEM_SELECTOR = ['.btn:not(.disabled):not([disabled]):not(.dropdown-item)', '.form-control:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'input[type=\"checkbox\"]:not(.disabled)', 'input[type=\"radio\"]:not(.disabled)'].join(','); // --- Props ---\n\nexport var props = makePropsConfigurable({\n  justify: makeProp(PROP_TYPE_BOOLEAN, false),\n  keyNav: makeProp(PROP_TYPE_BOOLEAN, false)\n}, NAME_BUTTON_TOOLBAR); // --- Main component ---\n// @vue/component\n\nexport var BButtonToolbar = /*#__PURE__*/Vue.extend({\n  name: NAME_BUTTON_TOOLBAR,\n  mixins: [normalizeSlotMixin],\n  props: props,\n  mounted: function mounted() {\n    // Pre-set the tabindexes if the markup does not include\n    // `tabindex=\"-1\"` on the toolbar items\n    if (this.keyNav) {\n      this.getItems();\n    }\n  },\n  methods: {\n    getItems: function getItems() {\n      var items = selectAll(ITEM_SELECTOR, this.$el); // Ensure `tabindex=\"-1\"` is set on every item\n\n      items.forEach(function (item) {\n        item.tabIndex = -1;\n      });\n      return items.filter(function (el) {\n        return isVisible(el);\n      });\n    },\n    focusFirst: function focusFirst() {\n      var items = this.getItems();\n      attemptFocus(items[0]);\n    },\n    focusPrev: function focusPrev(event) {\n      var items = this.getItems();\n      var index = items.indexOf(event.target);\n\n      if (index > -1) {\n        items = items.slice(0, index).reverse();\n        attemptFocus(items[0]);\n      }\n    },\n    focusNext: function focusNext(event) {\n      var items = this.getItems();\n      var index = items.indexOf(event.target);\n\n      if (index > -1) {\n        items = items.slice(index + 1);\n        attemptFocus(items[0]);\n      }\n    },\n    focusLast: function focusLast() {\n      var items = this.getItems().reverse();\n      attemptFocus(items[0]);\n    },\n    onFocusin: function onFocusin(event) {\n      var $el = this.$el;\n\n      if (event.target === $el && !contains($el, event.relatedTarget)) {\n        stopEvent(event);\n        this.focusFirst(event);\n      }\n    },\n    onKeydown: function onKeydown(event) {\n      var keyCode = event.keyCode,\n          shiftKey = event.shiftKey;\n\n      if (keyCode === CODE_UP || keyCode === CODE_LEFT) {\n        stopEvent(event);\n        shiftKey ? this.focusFirst(event) : this.focusPrev(event);\n      } else if (keyCode === CODE_DOWN || keyCode === CODE_RIGHT) {\n        stopEvent(event);\n        shiftKey ? this.focusLast(event) : this.focusNext(event);\n      }\n    }\n  },\n  render: function render(h) {\n    var keyNav = this.keyNav;\n    return h('div', {\n      staticClass: 'btn-toolbar',\n      class: {\n        'justify-content-between': this.justify\n      },\n      attrs: {\n        role: 'toolbar',\n        tabindex: keyNav ? '0' : null\n      },\n      on: keyNav ? {\n        focusin: this.onFocusin,\n        keydown: this.onKeydown\n      } : {}\n    }, [this.normalizeSlot()]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}