{"ast":null,"code":"import { Vue } from '../vue';\nimport { SLOT_NAME_DEFAULT } from '../constants/slots';\nimport { hasNormalizedSlot as _hasNormalizedSlot, normalizeSlot as _normalizeSlot } from '../utils/normalize-slot';\nimport { concat } from '../utils/array'; // @vue/component\n\nexport var normalizeSlotMixin = Vue.extend({\n  methods: {\n    // Returns `true` if the either a `$scopedSlot` or `$slot` exists with the specified name\n    // `name` can be a string name or an array of names\n    hasNormalizedSlot: function hasNormalizedSlot() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SLOT_NAME_DEFAULT;\n      var scopedSlots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$scopedSlots;\n      var slots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.$slots;\n      return _hasNormalizedSlot(name, scopedSlots, slots);\n    },\n    // Returns an array of rendered VNodes if slot found, otherwise `undefined`\n    // `name` can be a string name or an array of names\n    normalizeSlot: function normalizeSlot() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SLOT_NAME_DEFAULT;\n      var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scopedSlots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.$scopedSlots;\n      var slots = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.$slots;\n\n      var vNodes = _normalizeSlot(name, scope, scopedSlots, slots);\n\n      return vNodes ? concat(vNodes) : vNodes;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}