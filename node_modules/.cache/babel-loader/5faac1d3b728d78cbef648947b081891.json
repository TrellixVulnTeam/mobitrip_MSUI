{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue } from '../../vue';\nimport { NAME_CAROUSEL_SLIDE } from '../../constants/components';\nimport { HAS_TOUCH_SUPPORT } from '../../constants/env';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_NUMBER_STRING, PROP_TYPE_STRING } from '../../constants/props';\nimport { SLOT_NAME_IMG } from '../../constants/slots';\nimport { stopEvent } from '../../utils/events';\nimport { htmlOrText } from '../../utils/html';\nimport { identity } from '../../utils/identity';\nimport { sortKeys } from '../../utils/object';\nimport { makeProp, makePropsConfigurable, pluckProps, unprefixPropName } from '../../utils/props';\nimport { idMixin, props as idProps } from '../../mixins/id';\nimport { normalizeSlotMixin } from '../../mixins/normalize-slot';\nimport { BImg } from '../image/img'; // --- Props ---\n\nvar imgProps = {\n  imgAlt: makeProp(PROP_TYPE_STRING),\n  imgBlank: makeProp(PROP_TYPE_BOOLEAN, false),\n  imgBlankColor: makeProp(PROP_TYPE_STRING, 'transparent'),\n  imgHeight: makeProp(PROP_TYPE_NUMBER_STRING),\n  imgSrc: makeProp(PROP_TYPE_STRING),\n  imgWidth: makeProp(PROP_TYPE_NUMBER_STRING)\n};\nexport var props = makePropsConfigurable(sortKeys(_objectSpread(_objectSpread(_objectSpread({}, idProps), imgProps), {}, {\n  background: makeProp(PROP_TYPE_STRING),\n  caption: makeProp(PROP_TYPE_STRING),\n  captionHtml: makeProp(PROP_TYPE_STRING),\n  captionTag: makeProp(PROP_TYPE_STRING, 'h3'),\n  contentTag: makeProp(PROP_TYPE_STRING, 'div'),\n  contentVisibleUp: makeProp(PROP_TYPE_STRING),\n  text: makeProp(PROP_TYPE_STRING),\n  textHtml: makeProp(PROP_TYPE_STRING),\n  textTag: makeProp(PROP_TYPE_STRING, 'p')\n})), NAME_CAROUSEL_SLIDE); // --- Main component ---\n// @vue/component\n\nexport var BCarouselSlide = /*#__PURE__*/Vue.extend({\n  name: NAME_CAROUSEL_SLIDE,\n  mixins: [idMixin, normalizeSlotMixin],\n  inject: {\n    bvCarousel: {\n      // Explicitly disable touch if not a child of carousel\n      default: function _default() {\n        return {\n          noTouch: true\n        };\n      }\n    }\n  },\n  props: props,\n  computed: {\n    contentClasses: function contentClasses() {\n      return [this.contentVisibleUp ? 'd-none' : '', this.contentVisibleUp ? \"d-\".concat(this.contentVisibleUp, \"-block\") : ''];\n    },\n    computedWidth: function computedWidth() {\n      // Use local width, or try parent width\n      return this.imgWidth || this.bvCarousel.imgWidth || null;\n    },\n    computedHeight: function computedHeight() {\n      // Use local height, or try parent height\n      return this.imgHeight || this.bvCarousel.imgHeight || null;\n    }\n  },\n  render: function render(h) {\n    var $img = this.normalizeSlot(SLOT_NAME_IMG);\n\n    if (!$img && (this.imgSrc || this.imgBlank)) {\n      var on = {}; // Touch support event handler\n\n      /* istanbul ignore if: difficult to test in JSDOM */\n\n      if (!this.bvCarousel.noTouch && HAS_TOUCH_SUPPORT) {\n        on.dragstart = function (event) {\n          return stopEvent(event, {\n            propagation: false\n          });\n        };\n      }\n\n      $img = h(BImg, {\n        props: _objectSpread(_objectSpread({}, pluckProps(imgProps, this.$props, unprefixPropName.bind(null, 'img'))), {}, {\n          width: this.computedWidth,\n          height: this.computedHeight,\n          fluidGrow: true,\n          block: true\n        }),\n        on: on\n      });\n    }\n\n    var $contentChildren = [// Caption\n    this.caption || this.captionHtml ? h(this.captionTag, {\n      domProps: htmlOrText(this.captionHtml, this.caption)\n    }) : false, // Text\n    this.text || this.textHtml ? h(this.textTag, {\n      domProps: htmlOrText(this.textHtml, this.text)\n    }) : false, // Children\n    this.normalizeSlot() || false];\n    var $content = h();\n\n    if ($contentChildren.some(identity)) {\n      $content = h(this.contentTag, {\n        staticClass: 'carousel-caption',\n        class: this.contentClasses\n      }, $contentChildren.map(function ($child) {\n        return $child || h();\n      }));\n    }\n\n    return h('div', {\n      staticClass: 'carousel-item',\n      style: {\n        background: this.background || this.bvCarousel.background || null\n      },\n      attrs: {\n        id: this.safeId(),\n        role: 'listitem'\n      }\n    }, [$img, $content]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}