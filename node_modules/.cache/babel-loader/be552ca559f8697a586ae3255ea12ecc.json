{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nimport { RX_NUMBER } from '../constants/regex';\nimport { File } from '../constants/safe-types'; // --- Convenience inspection utilities ---\n\nexport var toType = function toType(value) {\n  return _typeof(value);\n};\nexport var toRawType = function toRawType(value) {\n  return Object.prototype.toString.call(value).slice(8, -1);\n};\nexport var toRawTypeLC = function toRawTypeLC(value) {\n  return toRawType(value).toLowerCase();\n};\nexport var isUndefined = function isUndefined(value) {\n  return value === undefined;\n};\nexport var isNull = function isNull(value) {\n  return value === null;\n};\nexport var isEmptyString = function isEmptyString(value) {\n  return value === '';\n};\nexport var isUndefinedOrNull = function isUndefinedOrNull(value) {\n  return isUndefined(value) || isNull(value);\n};\nexport var isUndefinedOrNullOrEmpty = function isUndefinedOrNullOrEmpty(value) {\n  return isUndefinedOrNull(value) || isEmptyString(value);\n};\nexport var isFunction = function isFunction(value) {\n  return toType(value) === 'function';\n};\nexport var isBoolean = function isBoolean(value) {\n  return toType(value) === 'boolean';\n};\nexport var isString = function isString(value) {\n  return toType(value) === 'string';\n};\nexport var isNumber = function isNumber(value) {\n  return toType(value) === 'number';\n};\nexport var isNumeric = function isNumeric(value) {\n  return RX_NUMBER.test(String(value));\n};\nexport var isPrimitive = function isPrimitive(value) {\n  return isBoolean(value) || isString(value) || isNumber(value);\n};\nexport var isArray = function isArray(value) {\n  return Array.isArray(value);\n}; // Quick object check\n// This is primarily used to tell Objects from primitive values\n// when we know the value is a JSON-compliant type\n// Note object could be a complex type like array, Date, etc.\n\nexport var isObject = function isObject(obj) {\n  return obj !== null && _typeof(obj) === 'object';\n}; // Strict object type check\n// Only returns true for plain JavaScript objects\n\nexport var isPlainObject = function isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n};\nexport var isDate = function isDate(value) {\n  return value instanceof Date;\n};\nexport var isEvent = function isEvent(value) {\n  return value instanceof Event;\n};\nexport var isFile = function isFile(value) {\n  return value instanceof File;\n};\nexport var isRegExp = function isRegExp(value) {\n  return toRawType(value) === 'RegExp';\n};\nexport var isPromise = function isPromise(value) {\n  return !isUndefinedOrNull(value) && isFunction(value.then) && isFunction(value.catch);\n};","map":null,"metadata":{},"sourceType":"module"}