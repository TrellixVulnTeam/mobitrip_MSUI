{"ast":null,"code":"var _watch;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue } from '../../vue';\nimport { NAME_FORM_RATING, NAME_FORM_RATING_STAR } from '../../constants/components';\nimport { EVENT_NAME_CHANGE, EVENT_NAME_SELECTED } from '../../constants/events';\nimport { PROP_TYPE_ARRAY_STRING, PROP_TYPE_BOOLEAN, PROP_TYPE_NUMBER, PROP_TYPE_NUMBER_STRING, PROP_TYPE_STRING } from '../../constants/props';\nimport { CODE_LEFT, CODE_RIGHT, CODE_UP, CODE_DOWN } from '../../constants/key-codes';\nimport { SLOT_NAME_ICON_CLEAR, SLOT_NAME_ICON_EMPTY, SLOT_NAME_ICON_FULL, SLOT_NAME_ICON_HALF } from '../../constants/slots';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { attemptBlur, attemptFocus } from '../../utils/dom';\nimport { stopEvent } from '../../utils/events';\nimport { identity } from '../../utils/identity';\nimport { isNull } from '../../utils/inspect';\nimport { isLocaleRTL } from '../../utils/locale';\nimport { mathMax, mathMin } from '../../utils/math';\nimport { makeModelMixin } from '../../utils/model';\nimport { toInteger, toFloat } from '../../utils/number';\nimport { omit, sortKeys } from '../../utils/object';\nimport { makeProp, makePropsConfigurable } from '../../utils/props';\nimport { toString } from '../../utils/string';\nimport { formSizeMixin, props as formSizeProps } from '../../mixins/form-size';\nimport { idMixin, props as idProps } from '../../mixins/id';\nimport { normalizeSlotMixin } from '../../mixins/normalize-slot';\nimport { props as formControlProps } from '../../mixins/form-control';\nimport { BIcon } from '../../icons/icon';\nimport { BIconStar, BIconStarHalf, BIconStarFill, BIconX } from '../../icons/icons'; // --- Constants ---\n\nvar _makeModelMixin = makeModelMixin('value', {\n  type: PROP_TYPE_NUMBER_STRING,\n  event: EVENT_NAME_CHANGE\n}),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event;\n\nvar MIN_STARS = 3;\nvar DEFAULT_STARS = 5; // --- Helper methods ---\n\nvar computeStars = function computeStars(stars) {\n  return mathMax(MIN_STARS, toInteger(stars, DEFAULT_STARS));\n};\n\nvar clampValue = function clampValue(value, min, max) {\n  return mathMax(mathMin(value, max), min);\n}; // --- Helper components ---\n// @vue/component\n\n\nvar BVFormRatingStar = Vue.extend({\n  name: NAME_FORM_RATING_STAR,\n  mixins: [normalizeSlotMixin],\n  props: {\n    disabled: makeProp(PROP_TYPE_BOOLEAN, false),\n    // If parent is focused\n    focused: makeProp(PROP_TYPE_BOOLEAN, false),\n    hasClear: makeProp(PROP_TYPE_BOOLEAN, false),\n    rating: makeProp(PROP_TYPE_NUMBER, 0),\n    readonly: makeProp(PROP_TYPE_BOOLEAN, false),\n    star: makeProp(PROP_TYPE_NUMBER, 0),\n    variant: makeProp(PROP_TYPE_STRING)\n  },\n  methods: {\n    onClick: function onClick(event) {\n      if (!this.disabled && !this.readonly) {\n        stopEvent(event, {\n          propagation: false\n        });\n        this.$emit(EVENT_NAME_SELECTED, this.star);\n      }\n    }\n  },\n  render: function render(h) {\n    var rating = this.rating,\n        star = this.star,\n        focused = this.focused,\n        hasClear = this.hasClear,\n        variant = this.variant,\n        disabled = this.disabled,\n        readonly = this.readonly;\n    var minStar = hasClear ? 0 : 1;\n    var type = rating >= star ? 'full' : rating >= star - 0.5 ? 'half' : 'empty';\n    var slotScope = {\n      variant: variant,\n      disabled: disabled,\n      readonly: readonly\n    };\n    return h('span', {\n      staticClass: 'b-rating-star',\n      class: {\n        // When not hovered, we use this class to focus the current (or first) star\n        focused: focused && rating === star || !toInteger(rating) && star === minStar,\n        // We add type classes to we can handle RTL styling\n        'b-rating-star-empty': type === 'empty',\n        'b-rating-star-half': type === 'half',\n        'b-rating-star-full': type === 'full'\n      },\n      attrs: {\n        tabindex: !disabled && !readonly ? '-1' : null\n      },\n      on: {\n        click: this.onClick\n      }\n    }, [h('span', {\n      staticClass: 'b-rating-icon'\n    }, [this.normalizeSlot(type, slotScope)])]);\n  }\n}); // --- Props ---\n\nexport var props = makePropsConfigurable(sortKeys(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, idProps), modelProps), omit(formControlProps, ['required', 'autofocus'])), formSizeProps), {}, {\n  // CSS color string (overrides variant)\n  color: makeProp(PROP_TYPE_STRING),\n  iconClear: makeProp(PROP_TYPE_STRING, 'x'),\n  iconEmpty: makeProp(PROP_TYPE_STRING, 'star'),\n  iconFull: makeProp(PROP_TYPE_STRING, 'star-fill'),\n  iconHalf: makeProp(PROP_TYPE_STRING, 'star-half'),\n  inline: makeProp(PROP_TYPE_BOOLEAN, false),\n  // Locale for the formatted value (if shown)\n  // Defaults to the browser locale. Falls back to `en`\n  locale: makeProp(PROP_TYPE_ARRAY_STRING),\n  noBorder: makeProp(PROP_TYPE_BOOLEAN, false),\n  precision: makeProp(PROP_TYPE_NUMBER_STRING),\n  readonly: makeProp(PROP_TYPE_BOOLEAN, false),\n  showClear: makeProp(PROP_TYPE_BOOLEAN, false),\n  showValue: makeProp(PROP_TYPE_BOOLEAN, false),\n  showValueMax: makeProp(PROP_TYPE_BOOLEAN, false),\n  stars: makeProp(PROP_TYPE_NUMBER_STRING, DEFAULT_STARS, function (value) {\n    return toInteger(value) >= MIN_STARS;\n  }),\n  variant: makeProp(PROP_TYPE_STRING)\n})), NAME_FORM_RATING); // --- Main component ---\n// @vue/component\n\nexport var BFormRating = /*#__PURE__*/Vue.extend({\n  name: NAME_FORM_RATING,\n  components: {\n    BIconStar: BIconStar,\n    BIconStarHalf: BIconStarHalf,\n    BIconStarFill: BIconStarFill,\n    BIconX: BIconX\n  },\n  mixins: [idMixin, modelMixin, formSizeMixin],\n  props: props,\n  data: function data() {\n    var value = toFloat(this[MODEL_PROP_NAME], null);\n    var stars = computeStars(this.stars);\n    return {\n      localValue: isNull(value) ? null : clampValue(value, 0, stars),\n      hasFocus: false\n    };\n  },\n  computed: {\n    computedStars: function computedStars() {\n      return computeStars(this.stars);\n    },\n    computedRating: function computedRating() {\n      var value = toFloat(this.localValue, 0);\n      var precision = toInteger(this.precision, 3); // We clamp the value between `0` and stars\n\n      return clampValue(toFloat(value.toFixed(precision)), 0, this.computedStars);\n    },\n    computedLocale: function computedLocale() {\n      var locales = concat(this.locale).filter(identity);\n      var nf = new Intl.NumberFormat(locales);\n      return nf.resolvedOptions().locale;\n    },\n    isInteractive: function isInteractive() {\n      return !this.disabled && !this.readonly;\n    },\n    isRTL: function isRTL() {\n      return isLocaleRTL(this.computedLocale);\n    },\n    formattedRating: function formattedRating() {\n      var precision = toInteger(this.precision);\n      var showValueMax = this.showValueMax;\n      var locale = this.computedLocale;\n      var formatOptions = {\n        notation: 'standard',\n        minimumFractionDigits: isNaN(precision) ? 0 : precision,\n        maximumFractionDigits: isNaN(precision) ? 3 : precision\n      };\n      var stars = this.computedStars.toLocaleString(locale);\n      var value = this.localValue;\n      value = isNull(value) ? showValueMax ? '-' : '' : value.toLocaleString(locale, formatOptions);\n      return showValueMax ? \"\".concat(value, \"/\").concat(stars) : value;\n    }\n  },\n  watch: (_watch = {}, _defineProperty(_watch, MODEL_PROP_NAME, function (newValue, oldValue) {\n    if (newValue !== oldValue) {\n      var value = toFloat(newValue, null);\n      this.localValue = isNull(value) ? null : clampValue(value, 0, this.computedStars);\n    }\n  }), _defineProperty(_watch, \"localValue\", function localValue(newValue, oldValue) {\n    if (newValue !== oldValue && newValue !== (this.value || 0)) {\n      this.$emit(MODEL_EVENT_NAME, newValue || null);\n    }\n  }), _defineProperty(_watch, \"disabled\", function disabled(newValue) {\n    if (newValue) {\n      this.hasFocus = false;\n      this.blur();\n    }\n  }), _watch),\n  methods: {\n    // --- Public methods ---\n    focus: function focus() {\n      if (!this.disabled) {\n        attemptFocus(this.$el);\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        attemptBlur(this.$el);\n      }\n    },\n    // --- Private methods ---\n    onKeydown: function onKeydown(event) {\n      var keyCode = event.keyCode;\n\n      if (this.isInteractive && arrayIncludes([CODE_LEFT, CODE_DOWN, CODE_RIGHT, CODE_UP], keyCode)) {\n        stopEvent(event, {\n          propagation: false\n        });\n        var value = toInteger(this.localValue, 0);\n        var min = this.showClear ? 0 : 1;\n        var stars = this.computedStars; // In RTL mode, LEFT/RIGHT are swapped\n\n        var amountRtl = this.isRTL ? -1 : 1;\n\n        if (keyCode === CODE_LEFT) {\n          this.localValue = clampValue(value - amountRtl, min, stars) || null;\n        } else if (keyCode === CODE_RIGHT) {\n          this.localValue = clampValue(value + amountRtl, min, stars);\n        } else if (keyCode === CODE_DOWN) {\n          this.localValue = clampValue(value - 1, min, stars) || null;\n        } else if (keyCode === CODE_UP) {\n          this.localValue = clampValue(value + 1, min, stars);\n        }\n      }\n    },\n    onSelected: function onSelected(value) {\n      if (this.isInteractive) {\n        this.localValue = value;\n      }\n    },\n    onFocus: function onFocus(event) {\n      this.hasFocus = !this.isInteractive ? false : event.type === 'focus';\n    },\n    // --- Render methods ---\n    renderIcon: function renderIcon(icon) {\n      return this.$createElement(BIcon, {\n        props: {\n          icon: icon,\n          variant: this.disabled || this.color ? null : this.variant || null\n        }\n      });\n    },\n    iconEmptyFn: function iconEmptyFn() {\n      return this.renderIcon(this.iconEmpty);\n    },\n    iconHalfFn: function iconHalfFn() {\n      return this.renderIcon(this.iconHalf);\n    },\n    iconFullFn: function iconFullFn() {\n      return this.renderIcon(this.iconFull);\n    },\n    iconClearFn: function iconClearFn() {\n      return this.$createElement(BIcon, {\n        props: {\n          icon: this.iconClear\n        }\n      });\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var disabled = this.disabled,\n        readonly = this.readonly,\n        name = this.name,\n        form = this.form,\n        inline = this.inline,\n        variant = this.variant,\n        color = this.color,\n        noBorder = this.noBorder,\n        hasFocus = this.hasFocus,\n        computedRating = this.computedRating,\n        computedStars = this.computedStars,\n        formattedRating = this.formattedRating,\n        showClear = this.showClear,\n        isRTL = this.isRTL,\n        isInteractive = this.isInteractive,\n        $scopedSlots = this.$scopedSlots;\n    var $content = [];\n\n    if (showClear && !disabled && !readonly) {\n      var $icon = h('span', {\n        staticClass: 'b-rating-icon'\n      }, [($scopedSlots[SLOT_NAME_ICON_CLEAR] || this.iconClearFn)()]);\n      $content.push(h('span', {\n        staticClass: 'b-rating-star b-rating-star-clear flex-grow-1',\n        class: {\n          focused: hasFocus && computedRating === 0\n        },\n        attrs: {\n          tabindex: isInteractive ? '-1' : null\n        },\n        on: {\n          click: function click() {\n            return _this.onSelected(null);\n          }\n        },\n        key: 'clear'\n      }, [$icon]));\n    }\n\n    for (var index = 0; index < computedStars; index++) {\n      var value = index + 1;\n      $content.push(h(BVFormRatingStar, {\n        staticClass: 'flex-grow-1',\n        style: color && !disabled ? {\n          color: color\n        } : {},\n        props: {\n          rating: computedRating,\n          star: value,\n          variant: disabled ? null : variant || null,\n          disabled: disabled,\n          readonly: readonly,\n          focused: hasFocus,\n          hasClear: showClear\n        },\n        on: {\n          selected: this.onSelected\n        },\n        scopedSlots: {\n          empty: $scopedSlots[SLOT_NAME_ICON_EMPTY] || this.iconEmptyFn,\n          half: $scopedSlots[SLOT_NAME_ICON_HALF] || this.iconHalfFn,\n          full: $scopedSlots[SLOT_NAME_ICON_FULL] || this.iconFullFn\n        },\n        key: index\n      }));\n    }\n\n    if (name) {\n      $content.push(h('input', {\n        attrs: {\n          type: 'hidden',\n          value: isNull(this.localValue) ? '' : computedRating,\n          name: name,\n          form: form || null\n        },\n        key: 'hidden'\n      }));\n    }\n\n    if (this.showValue) {\n      $content.push(h('b', {\n        staticClass: 'b-rating-value flex-grow-1',\n        attrs: {\n          'aria-hidden': 'true'\n        },\n        key: 'value'\n      }, toString(formattedRating)));\n    }\n\n    return h('output', {\n      staticClass: 'b-rating form-control align-items-center',\n      class: [{\n        'd-inline-flex': inline,\n        'd-flex': !inline,\n        'border-0': noBorder,\n        disabled: disabled,\n        readonly: !disabled && readonly\n      }, this.sizeFormClass],\n      attrs: {\n        id: this.safeId(),\n        dir: isRTL ? 'rtl' : 'ltr',\n        tabindex: disabled ? null : '0',\n        disabled: disabled,\n        role: 'slider',\n        'aria-disabled': disabled ? 'true' : null,\n        'aria-readonly': !disabled && readonly ? 'true' : null,\n        'aria-live': 'off',\n        'aria-valuemin': showClear ? '0' : '1',\n        'aria-valuemax': toString(computedStars),\n        'aria-valuenow': computedRating ? toString(computedRating) : null\n      },\n      on: {\n        keydown: this.onKeydown,\n        focus: this.onFocus,\n        blur: this.onFocus\n      }\n    }, $content);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}