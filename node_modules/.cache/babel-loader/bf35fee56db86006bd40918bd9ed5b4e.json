{"ast":null,"code":"import { Vue } from '../vue';\nimport { IS_BROWSER } from '../constants/env';\nimport { EVENT_OPTIONS_NO_CAPTURE } from '../constants/events';\nimport { arrayIncludes } from '../utils/array';\nimport { eventOn, eventOff } from '../utils/events';\nimport { keys } from '../utils/object'; // --- Constants ---\n\nvar PROP = '$_documentListeners'; // --- Mixin ---\n// @vue/component\n\nexport var listenOnDocumentMixin = Vue.extend({\n  created: function created() {\n    // Define non-reactive property\n    // Object of arrays, keyed by event name,\n    // where value is an array of callbacks\n    this[PROP] = {};\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _this = this; // Unregister all registered listeners\n\n\n    keys(this[PROP] || {}).forEach(function (event) {\n      _this[PROP][event].forEach(function (callback) {\n        _this.listenOffDocument(event, callback);\n      });\n    });\n    this[PROP] = null;\n  },\n  methods: {\n    registerDocumentListener: function registerDocumentListener(event, callback) {\n      if (this[PROP]) {\n        this[PROP][event] = this[PROP][event] || [];\n\n        if (!arrayIncludes(this[PROP][event], callback)) {\n          this[PROP][event].push(callback);\n        }\n      }\n    },\n    unregisterDocumentListener: function unregisterDocumentListener(event, callback) {\n      if (this[PROP] && this[PROP][event]) {\n        this[PROP][event] = this[PROP][event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n    },\n    listenDocument: function listenDocument(on, event, callback) {\n      on ? this.listenOnDocument(event, callback) : this.listenOffDocument(event, callback);\n    },\n    listenOnDocument: function listenOnDocument(event, callback) {\n      if (IS_BROWSER) {\n        eventOn(document, event, callback, EVENT_OPTIONS_NO_CAPTURE);\n        this.registerDocumentListener(event, callback);\n      }\n    },\n    listenOffDocument: function listenOffDocument(event, callback) {\n      if (IS_BROWSER) {\n        eventOff(document, event, callback, EVENT_OPTIONS_NO_CAPTURE);\n      }\n\n      this.unregisterDocumentListener(event, callback);\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}