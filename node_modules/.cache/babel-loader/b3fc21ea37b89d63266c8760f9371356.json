{"ast":null,"code":"import { Vue } from '../vue';\nimport { arrayIncludes } from '../utils/array';\nimport { keys } from '../utils/object'; // --- Constants ---\n\nvar PROP = '$_rootListeners'; // --- Mixin ---\n// @vue/component\n\nexport var listenOnRootMixin = Vue.extend({\n  created: function created() {\n    // Define non-reactive property\n    // Object of arrays, keyed by event name,\n    // where value is an array of callbacks\n    this[PROP] = {};\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _this = this; // Unregister all registered listeners\n\n\n    keys(this[PROP] || {}).forEach(function (event) {\n      _this[PROP][event].forEach(function (callback) {\n        _this.listenOffRoot(event, callback);\n      });\n    });\n    this[PROP] = null;\n  },\n  methods: {\n    registerRootListener: function registerRootListener(event, callback) {\n      if (this[PROP]) {\n        this[PROP][event] = this[PROP][event] || [];\n\n        if (!arrayIncludes(this[PROP][event], callback)) {\n          this[PROP][event].push(callback);\n        }\n      }\n    },\n    unregisterRootListener: function unregisterRootListener(event, callback) {\n      if (this[PROP] && this[PROP][event]) {\n        this[PROP][event] = this[PROP][event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n    },\n\n    /**\n     * Safely register event listeners on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on `$root` and is destroyed,\n     * this orphans a callback because the node is gone, but the `$root`\n     * does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers the listener\n     * to be removed in the component's `beforeDestroy()` hook\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      if (this.$root) {\n        this.$root.$on(event, callback);\n        this.registerRootListener(event, callback);\n      }\n    },\n\n    /**\n     * Safely register a `$once()` event listener on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on `$root` and is destroyed,\n     * this orphans a callback because the node is gone, but the `$root`\n     * does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers the listener\n     * to be removed in the component's `beforeDestroy()` hook\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n\n      if (this.$root) {\n        var _callback = function _callback() {\n          _this2.unregisterRootListener(_callback); // eslint-disable-next-line node/no-callback-literal\n\n\n          callback.apply(void 0, arguments);\n        };\n\n        this.$root.$once(event, _callback);\n        this.registerRootListener(event, _callback);\n      }\n    },\n\n    /**\n     * Safely unregister event listeners from the root Vue node\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOffRoot: function listenOffRoot(event, callback) {\n      this.unregisterRootListener(event, callback);\n\n      if (this.$root) {\n        this.$root.$off(event, callback);\n      }\n    },\n\n    /**\n     * Convenience method for calling `vm.$emit()` on `$root`\n     *\n     * @param {string} event\n     * @param {*} args\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      if (this.$root) {\n        var _this$$root;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args));\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}