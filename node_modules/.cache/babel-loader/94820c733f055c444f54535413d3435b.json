{"ast":null,"code":"import { Vue, mergeData } from '../../vue';\nimport { NAME_SKELETON_WRAPPER } from '../../constants/components';\nimport { PROP_TYPE_BOOLEAN } from '../../constants/props';\nimport { SLOT_NAME_DEFAULT, SLOT_NAME_LOADING } from '../../constants/slots';\nimport { normalizeSlot } from '../../utils/normalize-slot';\nimport { makeProp, makePropsConfigurable } from '../../utils/props'; // --- Props ---\n\nexport var props = makePropsConfigurable({\n  loading: makeProp(PROP_TYPE_BOOLEAN, false)\n}, NAME_SKELETON_WRAPPER); // --- Main component ---\n// @vue/component\n\nexport var BSkeletonWrapper = /*#__PURE__*/Vue.extend({\n  name: NAME_SKELETON_WRAPPER,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var data = _ref.data,\n        props = _ref.props,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots;\n    var $slots = slots();\n    var $scopedSlots = scopedSlots || {};\n    var slotScope = {};\n\n    if (props.loading) {\n      return h('div', mergeData(data, {\n        attrs: {\n          role: 'alert',\n          'aria-live': 'polite',\n          'aria-busy': true\n        },\n        staticClass: 'b-skeleton-wrapper',\n        key: 'loading'\n      }), normalizeSlot(SLOT_NAME_LOADING, slotScope, $scopedSlots, $slots));\n    }\n\n    return normalizeSlot(SLOT_NAME_DEFAULT, slotScope, $scopedSlots, $slots);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}