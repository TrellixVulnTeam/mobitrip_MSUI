{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue, mergeData } from '../../vue';\nimport { NAME_JUMBOTRON } from '../../constants/components';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_BOOLEAN_STRING, PROP_TYPE_NUMBER_STRING, PROP_TYPE_STRING } from '../../constants/props';\nimport { SLOT_NAME_DEFAULT, SLOT_NAME_HEADER, SLOT_NAME_LEAD } from '../../constants/slots';\nimport { htmlOrText } from '../../utils/html';\nimport { hasNormalizedSlot, normalizeSlot } from '../../utils/normalize-slot';\nimport { makeProp, makePropsConfigurable } from '../../utils/props';\nimport { BContainer } from '../layout/container'; // --- Props ---\n\nexport var props = makePropsConfigurable({\n  bgVariant: makeProp(PROP_TYPE_STRING),\n  borderVariant: makeProp(PROP_TYPE_STRING),\n  containerFluid: makeProp(PROP_TYPE_BOOLEAN_STRING, false),\n  fluid: makeProp(PROP_TYPE_BOOLEAN, false),\n  header: makeProp(PROP_TYPE_STRING),\n  headerHtml: makeProp(PROP_TYPE_STRING),\n  headerLevel: makeProp(PROP_TYPE_NUMBER_STRING, 3),\n  headerTag: makeProp(PROP_TYPE_STRING, 'h1'),\n  lead: makeProp(PROP_TYPE_STRING),\n  leadHtml: makeProp(PROP_TYPE_STRING),\n  leadTag: makeProp(PROP_TYPE_STRING, 'p'),\n  tag: makeProp(PROP_TYPE_STRING, 'div'),\n  textVariant: makeProp(PROP_TYPE_STRING)\n}, NAME_JUMBOTRON); // --- Main component ---\n// @vue/component\n\nexport var BJumbotron = /*#__PURE__*/Vue.extend({\n  name: NAME_JUMBOTRON,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var _class2;\n\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots;\n    var header = props.header,\n        headerHtml = props.headerHtml,\n        lead = props.lead,\n        leadHtml = props.leadHtml,\n        textVariant = props.textVariant,\n        bgVariant = props.bgVariant,\n        borderVariant = props.borderVariant;\n    var $scopedSlots = scopedSlots || {};\n    var $slots = slots();\n    var slotScope = {};\n    var $header = h();\n    var hasHeaderSlot = hasNormalizedSlot(SLOT_NAME_HEADER, $scopedSlots, $slots);\n\n    if (hasHeaderSlot || header || headerHtml) {\n      var headerLevel = props.headerLevel;\n      $header = h(props.headerTag, {\n        class: _defineProperty({}, \"display-\".concat(headerLevel), headerLevel),\n        domProps: hasHeaderSlot ? {} : htmlOrText(headerHtml, header)\n      }, normalizeSlot(SLOT_NAME_HEADER, slotScope, $scopedSlots, $slots));\n    }\n\n    var $lead = h();\n    var hasLeadSlot = hasNormalizedSlot(SLOT_NAME_LEAD, $scopedSlots, $slots);\n\n    if (hasLeadSlot || lead || leadHtml) {\n      $lead = h(props.leadTag, {\n        staticClass: 'lead',\n        domProps: hasLeadSlot ? {} : htmlOrText(leadHtml, lead)\n      }, normalizeSlot(SLOT_NAME_LEAD, slotScope, $scopedSlots, $slots));\n    }\n\n    var $children = [$header, $lead, normalizeSlot(SLOT_NAME_DEFAULT, slotScope, $scopedSlots, $slots)]; // If fluid, wrap content in a container\n\n    if (props.fluid) {\n      $children = [h(BContainer, {\n        props: {\n          fluid: props.containerFluid\n        }\n      }, $children)];\n    }\n\n    return h(props.tag, mergeData(data, {\n      staticClass: 'jumbotron',\n      class: (_class2 = {\n        'jumbotron-fluid': props.fluid\n      }, _defineProperty(_class2, \"text-\".concat(textVariant), textVariant), _defineProperty(_class2, \"bg-\".concat(bgVariant), bgVariant), _defineProperty(_class2, \"border-\".concat(borderVariant), borderVariant), _defineProperty(_class2, \"border\", borderVariant), _class2)\n    }), $children);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}