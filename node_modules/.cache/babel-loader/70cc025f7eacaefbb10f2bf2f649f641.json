{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue, mergeData } from '../../vue';\nimport { NAME_BUTTON_CLOSE } from '../../constants/components';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_STRING } from '../../constants/props';\nimport { SLOT_NAME_DEFAULT } from '../../constants/slots';\nimport { stopEvent } from '../../utils/events';\nimport { isEvent } from '../../utils/inspect';\nimport { makeProp, makePropsConfigurable } from '../../utils/props';\nimport { hasNormalizedSlot, normalizeSlot } from '../../utils/normalize-slot'; // --- Props ---\n\nexport var props = makePropsConfigurable({\n  ariaLabel: makeProp(PROP_TYPE_STRING, 'Close'),\n  content: makeProp(PROP_TYPE_STRING, '&times;'),\n  disabled: makeProp(PROP_TYPE_BOOLEAN, false),\n  textVariant: makeProp(PROP_TYPE_STRING)\n}, NAME_BUTTON_CLOSE); // --- Main component ---\n// @vue/component\n\nexport var BButtonClose = /*#__PURE__*/Vue.extend({\n  name: NAME_BUTTON_CLOSE,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots;\n    var $slots = slots();\n    var $scopedSlots = scopedSlots || {};\n    var componentData = {\n      staticClass: 'close',\n      class: _defineProperty({}, \"text-\".concat(props.textVariant), props.textVariant),\n      attrs: {\n        type: 'button',\n        disabled: props.disabled,\n        'aria-label': props.ariaLabel ? String(props.ariaLabel) : null\n      },\n      on: {\n        click: function click(event) {\n          // Ensure click on button HTML content is also disabled\n\n          /* istanbul ignore if: bug in JSDOM still emits click on inner element */\n          if (props.disabled && isEvent(event)) {\n            stopEvent(event);\n          }\n        }\n      }\n    }; // Careful not to override the default slot with innerHTML\n\n    if (!hasNormalizedSlot(SLOT_NAME_DEFAULT, $scopedSlots, $slots)) {\n      componentData.domProps = {\n        innerHTML: props.content\n      };\n    }\n\n    return h('button', mergeData(data, componentData), normalizeSlot(SLOT_NAME_DEFAULT, {}, $scopedSlots, $slots));\n  }\n});","map":null,"metadata":{},"sourceType":"module"}