{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue, mergeData } from '../../vue';\nimport { NAME_EMBED } from '../../constants/components';\nimport { PROP_TYPE_STRING } from '../../constants/props';\nimport { arrayIncludes } from '../../utils/array';\nimport { omit } from '../../utils/object';\nimport { makeProp, makePropsConfigurable } from '../../utils/props'; // --- Constants ---\n\nvar TYPES = ['iframe', 'embed', 'video', 'object', 'img', 'b-img', 'b-img-lazy']; // --- Props ---\n\nexport var props = makePropsConfigurable({\n  aspect: makeProp(PROP_TYPE_STRING, '16by9'),\n  tag: makeProp(PROP_TYPE_STRING, 'div'),\n  type: makeProp(PROP_TYPE_STRING, 'iframe', function (value) {\n    return arrayIncludes(TYPES, value);\n  })\n}, NAME_EMBED); // --- Main component ---\n// @vue/component\n\nexport var BEmbed = /*#__PURE__*/Vue.extend({\n  name: NAME_EMBED,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var aspect = props.aspect;\n    return h(props.tag, {\n      staticClass: 'embed-responsive',\n      class: _defineProperty({}, \"embed-responsive-\".concat(aspect), aspect),\n      ref: data.ref\n    }, [h(props.type, mergeData(omit(data, ['ref']), {\n      staticClass: 'embed-responsive-item'\n    }), children)]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}